diff -pruN linux-2.6.36-git13/net/netfilter/Kconfig b/net/netfilter/Kconfig
--- linux-2.6.36-git13/net/netfilter/Kconfig	2010-10-30 23:33:06.550989187 +0300
+++ b/net/netfilter/Kconfig	2010-10-30 23:37:23.540989187 +0300
@@ -499,6 +499,12 @@ config NETFILTER_XT_TARGET_NOTRACK
 	  If you want to compile it as a module, say M here and read
 	  <file:Documentation/kbuild/modules.txt>.  If unsure, say `N'.
 
+config NETFILTER_XT_TARGET_NOTRACK_NEW
+	bool "NOTRACK safe (only new)"
+	depends on NETFILTER_XT_TARGET_NOTRACK
+	help
+	  Slow but safe way to NOTRACK only new/untracked connections.
+
 config NETFILTER_XT_TARGET_RATEEST
 	tristate '"RATEEST" target support'
 	depends on NETFILTER_ADVANCED
diff -pruN linux-2.6.36-git13/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
--- linux-2.6.36-git13/net/netfilter/nf_conntrack_core.c	2010-10-30 23:33:06.560989187 +0300
+++ b/net/netfilter/nf_conntrack_core.c	2010-10-30 23:37:23.540989187 +0300
@@ -818,6 +818,19 @@ resolve_normal_ct(struct net *net, struc
 	hash = hash_conntrack_raw(&tuple, zone);
 	h = __nf_conntrack_find_get(net, zone, &tuple, hash);
 	if (!h) {
+#ifdef CONFIG_NETFILTER_XT_TARGET_NOTRACK_NEW
+		if(skb->nfctinfo == IP_CT_NEW) {
+			struct nf_conntrack_expect *exp;
+
+			exp = nf_ct_expect_find_get(net, zone, &tuple);
+			if (!exp) {
+				skb->nfct = &nf_conntrack_untracked.ct_general;
+				nf_conntrack_get(skb->nfct);
+				return NULL;
+			}
+			nf_ct_expect_put(exp);
+		}
+#endif
 		h = init_conntrack(net, tmpl, &tuple, l3proto, l4proto,
 				   skb, dataoff, hash);
 		if (!h)
@@ -906,6 +919,12 @@ nf_conntrack_in(struct net *net, u_int8_
 	ct = resolve_normal_ct(net, tmpl, skb, dataoff, pf, protonum,
 			       l3proto, l4proto, &set_reply, &ctinfo);
 	if (!ct) {
+#ifdef CONFIG_NETFILTER_XT_TARGET_NOTRACK_NEW
+		if(skb->nfct == &nf_conntrack_untracked.ct_general){
+		    NF_CT_STAT_INC_ATOMIC(net, ignore);
+		    return NF_ACCEPT;
+		}
+#endif
 		/* Not valid part of a connection */
 		NF_CT_STAT_INC_ATOMIC(net, invalid);
 		ret = NF_ACCEPT;
diff -pruN linux-2.6.36-git13/net/netfilter/xt_NOTRACK.c b/net/netfilter/xt_NOTRACK.c
--- linux-2.6.36-git13/net/netfilter/xt_NOTRACK.c	2010-10-20 23:30:22.000000000 +0300
+++ b/net/netfilter/xt_NOTRACK.c	2010-10-30 23:37:23.540989187 +0300
@@ -19,6 +19,9 @@ notrack_tg(struct sk_buff *skb, const st
 	if (skb->nfct != NULL)
 		return XT_CONTINUE;
 
+#ifdef CONFIG_NETFILTER_XT_TARGET_NOTRACK_NEW
+	skb->nfctinfo = IP_CT_NEW;
+#else
 	/* Attach fake conntrack entry.
 	   If there is a real ct entry correspondig to this packet,
 	   it'll hang aroun till timing out. We don't deal with it
@@ -26,6 +29,7 @@ notrack_tg(struct sk_buff *skb, const st
 	skb->nfct = &nf_ct_untracked_get()->ct_general;
 	skb->nfctinfo = IP_CT_NEW;
 	nf_conntrack_get(skb->nfct);
+#endif
 
 	return XT_CONTINUE;
 }
