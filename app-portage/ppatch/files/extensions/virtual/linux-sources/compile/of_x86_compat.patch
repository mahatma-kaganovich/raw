Starting 4.2, OF enabled on x86. But on non-OF/DT machine,
non-DT cache setup completly skipped. Unsure about this cache
info usability, but while I can trivially enable it - do it.

2do: think about publishing (or unusable?)
If you find it [usable] - include somewhere.

Signed-off-by: Dzianis Kahanovich <mahatma@eu.by>

--- a/drivers/base/cacheinfo.c	2015-08-30 21:34:09.000000000 +0300
+++ b/drivers/base/cacheinfo.c	2015-09-23 02:00:31.000000000 +0300
@@ -39,6 +39,18 @@ struct cpu_cacheinfo *get_cpu_cacheinfo(
 	return ci_cacheinfo(cpu);
 }
 
+static inline bool cache_leaves_are_shared_non_dt(struct cacheinfo *this_leaf,
+					   struct cacheinfo *sib_leaf)
+{
+	/*
+	 * For non-DT systems, assume unique level 1 cache, system-wide
+	 * shared caches for all other levels. This will be used only if
+	 * arch specific code has not populated shared_cpu_map
+	 */
+	return !(this_leaf->level == 1);
+}
+
+
 #ifdef CONFIG_OF
 static int cache_setup_of_node(unsigned int cpu)
 {
@@ -59,7 +71,12 @@ static int cache_setup_of_node(unsigned
 	np = cpu_dev->of_node;
 	if (!np) {
 		pr_err("Failed to find cpu%d device node\n", cpu);
-		return -ENOENT;
+		/*
+		 * This is normal result for my non-DT SMP systems.
+		 * If sure experienced other case - change 1|2 other ENOENT.
+		 * (Or even if you want run mixed|non-pure-open|broken DT)
+		 */
+		return -EINVAL;
 	}
 
 	while (index < cache_leaves(cpu)) {
@@ -90,12 +107,7 @@ static inline int cache_setup_of_node(un
 static inline bool cache_leaves_are_shared(struct cacheinfo *this_leaf,
 					   struct cacheinfo *sib_leaf)
 {
-	/*
-	 * For non-DT systems, assume unique level 1 cache, system-wide
-	 * shared caches for all other levels. This will be used only if
-	 * arch specific code has not populated shared_cpu_map
-	 */
-	return !(this_leaf->level == 1);
+	return cache_leaves_are_shared_non_dt(this_leaf, sib_leaf);
 }
 #endif
 
@@ -107,7 +119,7 @@ static int cache_shared_cpu_map_setup(un
 	int ret;
 
 	ret = cache_setup_of_node(cpu);
-	if (ret)
+	if (ret == -ENOENT)
 		return ret;
 
 	for (index = 0; index < cache_leaves(cpu); index++) {
@@ -125,7 +137,8 @@ static int cache_shared_cpu_map_setup(un
 			if (i == cpu || !sib_cpu_ci->info_list)
 				continue;/* skip if itself or no cacheinfo */
 			sib_leaf = sib_cpu_ci->info_list + index;
-			if (cache_leaves_are_shared(this_leaf, sib_leaf)) {
+			if (ret ? cache_leaves_are_shared_non_dt(this_leaf, sib_leaf) :
+			    cache_leaves_are_shared(this_leaf, sib_leaf)) {
 				cpumask_set_cpu(cpu, &sib_leaf->shared_cpu_map);
 				cpumask_set_cpu(i, &this_leaf->shared_cpu_map);
 			}
