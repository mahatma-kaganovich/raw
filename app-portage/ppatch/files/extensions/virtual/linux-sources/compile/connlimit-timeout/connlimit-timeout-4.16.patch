--- a/include/net/netfilter/nf_conntrack_count.h	2018-04-02 00:20:27.000000000 +0300
+++ b/include/net/netfilter/nf_conntrack_count.h	2018-06-21 18:04:11.000000000 +0300
@@ -13,5 +13,6 @@ unsigned int nf_conncount_count(struct n
 				const u32 *key,
 				unsigned int family,
 				const struct nf_conntrack_tuple *tuple,
-				const struct nf_conntrack_zone *zone);
+				const struct nf_conntrack_zone *zone,
+				const struct nf_conn *ct);
 #endif
--- a/include/net/netfilter/nf_conntrack.h	2018-04-02 00:20:27.000000000 +0300
+++ b/include/net/netfilter/nf_conntrack.h	2018-06-21 18:03:54.000000000 +0300
@@ -73,6 +73,9 @@ struct nf_conn {
 
 	/* jiffies32 when this ct is considered dead */
 	u32 timeout;
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	unsigned long use_time;
+#endif
 
 	possible_net_t ct_net;
 
--- a/net/netfilter/Kconfig	2018-04-02 00:20:27.000000000 +0300
+++ b/net/netfilter/Kconfig	2018-06-21 18:03:54.000000000 +0300
@@ -1159,6 +1159,15 @@ config NETFILTER_XT_MATCH_CONNLIMIT
 	  This match allows you to match against the number of parallel
 	  connections to a server per client IP address (or address block).
 
+config NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	bool '"connlimit" (conncount) only active connections'
+	depends on NETFILTER_CONNCOUNT
+	help
+	  Skip keepalive and other not closed inactive connections.
+
+	  N to care memory usage,
+	  Y to care channel usage.
+
 config NETFILTER_XT_MATCH_CONNMARK
 	tristate  '"connmark" connection mark match support'
 	depends on NF_CONNTRACK
--- a/net/netfilter/nf_conncount.c	2018-04-02 00:20:27.000000000 +0300
+++ b/net/netfilter/nf_conncount.c	2018-06-21 18:03:54.000000000 +0300
@@ -42,6 +42,11 @@
 #define CONNCOUNT_GC_MAX_NODES	8
 #define MAX_KEYLEN		5
 
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+/* 10 sec */
+#define CONNLIMIT_TIMEOUT (10*HZ)
+#endif
+
 /* we will save the tuples of all connections we care about */
 struct nf_conncount_tuple {
 	struct hlist_node		node;
@@ -96,7 +101,8 @@ static unsigned int check_hlist(struct n
 				struct hlist_head *head,
 				const struct nf_conntrack_tuple *tuple,
 				const struct nf_conntrack_zone *zone,
-				bool *addit)
+				bool *addit,
+				const struct nf_conn *ct,
 {
 	const struct nf_conntrack_tuple_hash *found;
 	struct nf_conncount_tuple *conn;
@@ -134,6 +140,20 @@ static unsigned int check_hlist(struct n
 			kmem_cache_free(conncount_conn_cachep, conn);
 			continue;
 		}
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+		if (found_ct != NULL) {
+			/* count only active connections */
+			if (jiffies - found_ct->use_time > CONNLIMIT_TIMEOUT) {
+				nf_ct_put(found_ct);
+				continue;
+			}
+			/* force to first connections to be active */
+			if (found_ct == ct) {
+				nf_ct_put(found_ct);
+				break;
+			}
+		}
+#endif
 
 		nf_ct_put(found_ct);
 		length++;
@@ -160,7 +180,8 @@ count_tree(struct net *net, struct rb_ro
 	   const u32 *key, u8 keylen,
 	   u8 family,
 	   const struct nf_conntrack_tuple *tuple,
-	   const struct nf_conntrack_zone *zone)
+	   const struct nf_conntrack_zone *zone,
+	   const struct nf_conn *ct)
 {
 	struct nf_conncount_rb *gc_nodes[CONNCOUNT_GC_MAX_NODES];
 	struct rb_node **rbnode, *parent;
@@ -188,7 +209,7 @@ count_tree(struct net *net, struct rb_ro
 		} else {
 			/* same source network -> be counted! */
 			unsigned int count;
-			count = check_hlist(net, &rbconn->hhead, tuple, zone, &addit);
+			count = check_hlist(net, &rbconn->hhead, tuple, zone, &addit, ct);
 
 			tree_nodes_free(root, gc_nodes, gc_count);
 			if (!addit)
@@ -204,7 +225,7 @@ count_tree(struct net *net, struct rb_ro
 			continue;
 
 		/* only used for GC on hhead, retval and 'addit' ignored */
-		check_hlist(net, &rbconn->hhead, tuple, zone, &addit);
+		check_hlist(net, &rbconn->hhead, tuple, zone, &addit, ct);
 		if (hlist_empty(&rbconn->hhead))
 			gc_nodes[gc_count++] = rbconn;
 	}
@@ -248,7 +269,8 @@ unsigned int nf_conncount_count(struct n
 				const u32 *key,
 				unsigned int family,
 				const struct nf_conntrack_tuple *tuple,
-				const struct nf_conntrack_zone *zone)
+				const struct nf_conntrack_zone *zone,
+				const struct nf_conn *ct)
 {
 	struct rb_root *root;
 	int count;
@@ -259,7 +281,7 @@ unsigned int nf_conncount_count(struct n
 
 	spin_lock_bh(&nf_conncount_locks[hash % CONNCOUNT_LOCK_SLOTS]);
 
-	count = count_tree(net, root, key, data->keylen, family, tuple, zone);
+	count = count_tree(net, root, key, data->keylen, family, tuple, zone, ct);
 
 	spin_unlock_bh(&nf_conncount_locks[hash % CONNCOUNT_LOCK_SLOTS]);
 
--- a/net/netfilter/nf_conntrack_core.c	2018-04-02 00:20:27.000000000 +0300
+++ b/net/netfilter/nf_conntrack_core.c	2018-06-21 18:03:54.000000000 +0300
@@ -794,6 +794,9 @@ __nf_conntrack_confirm(struct sk_buff *s
 	/* Timer relative to confirmation time, not original
 	   setting time, otherwise we'd get timer wrap in
 	   weird delay cases. */
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	ct->use_time = jiffies;
+#endif
 	ct->timeout += nfct_time_stamp;
 	atomic_inc(&ct->ct_general.use);
 	ct->status |= IPS_CONFIRMED;
@@ -1515,6 +1518,10 @@ void __nf_ct_refresh_acct(struct nf_conn
 {
 	WARN_ON(!skb);
 
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	ct->use_time = jiffies;
+#endif
+
 	/* Only update if this is not a fixed timeout */
 	if (test_bit(IPS_FIXED_TIMEOUT_BIT, &ct->status))
 		goto acct;
--- a/net/netfilter/xt_connlimit.c	2018-04-02 00:20:27.000000000 +0300
+++ b/net/netfilter/xt_connlimit.c	2018-06-21 18:04:47.000000000 +0300
@@ -68,7 +68,7 @@ connlimit_mt(const struct sk_buff *skb,
 	}
 
 	connections = nf_conncount_count(net, info->data, key,
-					 xt_family(par), tuple_ptr, zone);
+					 xt_family(par), tuple_ptr, zone, ct);
 	if (connections == 0)
 		/* kmalloc failed, drop it entirely */
 		goto hotdrop;
