Signed-off-by: Denis Kaganovich <mahatma@eu.by>

diff -pruN a/src/acl/Asn.cc b/src/acl/Asn.cc
--- a/src/acl/Asn.cc	2011-08-30 08:02:10.000000000 +0300
+++ b/src/acl/Asn.cc	2011-09-01 00:26:13.000000000 +0300
@@ -45,6 +45,7 @@
 #include "acl/SourceAsn.h"
 #include "acl/DestinationAsn.h"
 #include "acl/DestinationIp.h"
+#include "acl/DnsIp.h"
 #include "HttpReply.h"
 #include "forward.h"
 #include "wordlist.h"
diff -pruN a/src/acl/DnsIp.cc b/src/acl/DnsIp.cc
--- a/src/acl/DnsIp.cc	1970-01-01 03:00:00.000000000 +0300
+++ b/src/acl/DnsIp.cc	2011-09-01 13:12:48.000000000 +0300
@@ -0,0 +1,42 @@
+#include "squid.h"
+#include "acl/DnsIp.h"
+#include "acl/FilledChecklist.h"
+#include "HttpRequest.h"
+
+char const *
+ACLDNSIP::typeString() const
+{
+    return "dst_dns";
+}
+
+// copy of ACLDestinationIP::match with "|IP_LOOKUP_NS"
+int
+ACLDNSIP::match(ACLChecklist *cl)
+{
+    ACLFilledChecklist *checklist = Filled(cl);
+    const ipcache_addrs *ia = ipcache_gethostbyname(checklist->request->GetHost(), IP_LOOKUP_IF_MISS|IP_LOOKUP_NS);
+
+    if (ia) {
+        /* Entry in cache found */
+
+        for (int k = 0; k < (int) ia->count; k++) {
+            if (ACLIP::match(ia->in_addrs[k]))
+                return 1;
+        }
+
+        return 0;
+    } else if (!checklist->request->flags.destinationIPLookedUp()) {
+        /* No entry in cache, lookup not attempted */
+        debugs(28, 3, "aclMatchAcl: Can't yet compare '" << name << "' ACL for '" << checklist->request->GetHost() << "'");
+        checklist->changeState (DestinationIPLookup::Instance());
+        return 0;
+    } else {
+        return 0;
+    }
+}
+
+ACL *
+ACLDNSIP::clone() const
+{
+    return new ACLDNSIP(*this);
+}
diff -pruN a/src/acl/DnsIp.h b/src/acl/DnsIp.h
--- a/src/acl/DnsIp.h	1970-01-01 03:00:00.000000000 +0300
+++ b/src/acl/DnsIp.h	2011-09-01 13:10:07.000000000 +0300
@@ -0,0 +1,21 @@
+#ifndef SQUID_ACLDNSIP_H
+#define SQUID_ACLDNSIP_H
+#include "acl/DestinationIp.h"
+
+class ACLDNSIP : public ACLDestinationIP
+{
+
+public:
+    MEMPROXY_CLASS(ACLDNSIP);
+
+    virtual char const *typeString() const;
+    virtual int match(ACLChecklist *checklist);
+    virtual ACL *clone()const;
+private:
+    static Prototype RegistryProtoype;
+    static ACLDNSIP RegistryEntry_;
+};
+
+MEMPROXY_CLASS_INLINE(ACLDNSIP);
+
+#endif /* SQUID_ACLDNSIP_H */
diff -pruN a/src/acl/Makefile.am b/src/acl/Makefile.am
--- a/src/acl/Makefile.am	2011-08-30 08:02:10.000000000 +0300
+++ b/src/acl/Makefile.am	2011-09-01 00:26:13.000000000 +0300
@@ -43,6 +43,8 @@ libacls_la_SOURCES = \
 	DestinationDomain.h \
 	DestinationIp.cc \
 	DestinationIp.h \
+	DnsIp.cc \
+	DnsIp.h \
 	DomainData.cc \
 	DomainData.h \
 	ExtUser.cc \
diff -pruN a/src/acl/Makefile.in b/src/acl/Makefile.in
--- a/src/acl/Makefile.in	2011-08-30 08:03:24.000000000 +0300
+++ b/src/acl/Makefile.in	2011-09-01 00:26:13.000000000 +0300
@@ -71,7 +71,7 @@ am__libacls_la_SOURCES_DIST = IntRange.c
 	UrlPort.cc UrlPort.h UserData.cc UserData.h Gadgets.cc \
 	Gadgets.h CertificateData.cc CertificateData.h Certificate.cc \
 	Certificate.h SslError.cc SslError.h SslErrorData.cc \
-	SslErrorData.h Arp.cc Arp.h
+	SslErrorData.h Arp.cc Arp.h DnsIp.cc DnsIp.h
 am__objects_1 = CertificateData.lo Certificate.lo SslError.lo \
 	SslErrorData.lo
 @ENABLE_SSL_TRUE@am__objects_2 = $(am__objects_1)
@@ -85,7 +85,7 @@ am_libacls_la_OBJECTS = IntRange.lo Rege
 	MyPortName.lo PeerName.lo Protocol.lo ProtocolData.lo \
 	Referer.lo ReplyMimeType.lo RequestMimeType.lo SourceDomain.lo \
 	SourceIp.lo Tag.lo Url.lo UrlPath.lo UrlPort.lo UserData.lo \
-	Gadgets.lo $(am__objects_2) $(am__objects_4)
+	Gadgets.lo DnsIp.lo $(am__objects_2) $(am__objects_4)
 libacls_la_OBJECTS = $(am_libacls_la_OBJECTS)
 libapi_la_LIBADD =
 am_libapi_la_OBJECTS = Acl.lo Checklist.lo
@@ -360,7 +360,7 @@ libacls_la_SOURCES = IntRange.cc IntRang
 	RequestMimeType.cc RequestMimeType.h SourceAsn.h \
 	SourceDomain.cc SourceDomain.h SourceIp.cc SourceIp.h Tag.cc \
 	Tag.h Url.cc Url.h UrlPath.cc UrlPath.h UrlPort.cc UrlPort.h \
-	UserData.cc UserData.h Gadgets.cc Gadgets.h $(am__append_2) \
+	UserData.cc UserData.h Gadgets.cc Gadgets.h  DnsIp.cc DnsIp.h $(am__append_2) \
 	$(am__append_3)
 EXTRA_libacls_la_SOURCES = $(SSL_ACLS) $(ARP_ACLS)
 SSL_ACLS = \
@@ -448,6 +448,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Checklist.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DestinationDomain.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DestinationIp.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DnsIp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DomainData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ExtUser.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/FilledChecklist.Plo@am__quote@
diff -pruN a/src/AclRegs.cc b/src/AclRegs.cc
--- a/src/AclRegs.cc	2011-08-30 08:02:10.000000000 +0300
+++ b/src/AclRegs.cc	2011-09-01 00:43:22.000000000 +0300
@@ -16,6 +16,7 @@
 #include "acl/DestinationAsn.h"
 #include "acl/DestinationDomain.h"
 #include "acl/DestinationIp.h"
+#include "acl/DnsIp.h"
 #include "acl/DomainData.h"
 #include "acl/ExtUser.h"
 #include "acl/FilledChecklist.h"
@@ -75,6 +76,8 @@ ACL::Prototype ACLDestinationDomain::Reg
 ACLStrategised<char const *> ACLDestinationDomain::RegexRegistryEntry_(new ACLRegexData,ACLDestinationDomainStrategy::Instance() ,"dstdom_regex");
 ACL::Prototype ACLDestinationIP::RegistryProtoype(&ACLDestinationIP::RegistryEntry_, "dst");
 ACLDestinationIP ACLDestinationIP::RegistryEntry_;
+ACL::Prototype ACLDNSIP::RegistryProtoype(&ACLDNSIP::RegistryEntry_, "dst_dns");
+ACLDNSIP ACLDNSIP::RegistryEntry_;
 ACL::Prototype ACLExtUser::UserRegistryProtoype(&ACLExtUser::UserRegistryEntry_, "ext_user");
 ACLExtUser ACLExtUser::UserRegistryEntry_(new ACLUserData, "ext_user");
 ACL::Prototype ACLExtUser::RegexRegistryProtoype(&ACLExtUser::RegexRegistryEntry_, "ext_user_regex" );
diff -pruN a/src/cf.data.pre b/src/cf.data.pre
--- a/src/cf.data.pre	2011-08-30 08:02:10.000000000 +0300
+++ b/src/cf.data.pre	2011-09-01 13:47:48.000000000 +0300
@@ -734,6 +734,12 @@ DOC_START
 	acl aclname tag tagvalue ...
 	  # string match on tag returned by external acl helper [slow]
 
+	acl aclname dst_dns ip(s) ...
+	  # match last DNS IP address, positive resolved destination domain
+	  # see also dns_nameservers
+	  # primary designed to failover channel selection
+	  # only for internal DNS resolver
+
 	Examples:
 		acl macaddress arp 09:00:2b:23:45:67
 		acl myexample dst_as 1241
diff -pruN a/src/defines.h b/src/defines.h
--- a/src/defines.h	2011-08-30 08:02:10.000000000 +0300
+++ b/src/defines.h	2011-09-01 00:26:13.000000000 +0300
@@ -102,6 +102,7 @@
 #define IDENT_DONE 2
 
 #define IP_LOOKUP_IF_MISS	0x01
+#define IP_LOOKUP_NS		0x02
 
 #define MAX_MIME 4096
 
diff -pruN a/src/dns_internal.cc b/src/dns_internal.cc
--- a/src/dns_internal.cc	2011-08-30 08:02:10.000000000 +0300
+++ b/src/dns_internal.cc	2011-09-01 00:26:13.000000000 +0300
@@ -183,7 +183,7 @@ static void idnsDoSendQueryVC(nsvc *vc);
 
 static int idnsFromKnownNameserver(IpAddress const &from);
 static idns_query *idnsFindQuery(unsigned short id);
-static void idnsGrokReply(const char *buf, size_t sz);
+static void idnsGrokReply(const char *buf, size_t sz, IpAddress const *from);
 static PF idnsRead;
 static EVH idnsCheckQueue;
 static void idnsTickleQueue(void);
@@ -915,7 +915,7 @@ idnsQueryID(void)
 }
 
 static void
-idnsCallback(idns_query *q, rfc1035_rr *answers, int n, const char *error)
+idnsCallback(idns_query *q, rfc1035_rr *answers, int n, const char *error, IpAddress const *from)
 {
     IDNSCB *callback;
     void *cbdata;
@@ -924,7 +924,7 @@ idnsCallback(idns_query *q, rfc1035_rr *
     q->callback = NULL;
 
     if (cbdataReferenceValidDone(q->callback_data, &cbdata))
-        callback(cbdata, answers, n, error);
+        callback(cbdata, answers, n, error, from);
 
     while (q->queue) {
         idns_query *q2 = q->queue;
@@ -933,7 +933,7 @@ idnsCallback(idns_query *q, rfc1035_rr *
         q2->callback = NULL;
 
         if (cbdataReferenceValidDone(q2->callback_data, &cbdata))
-            callback(cbdata, answers, n, error);
+            callback(cbdata, answers, n, error, from);
 
         cbdataFree(q2);
     }
@@ -955,7 +955,7 @@ idnsDropMessage(rfc1035_message *message
 }
 
 static void
-idnsGrokReply(const char *buf, size_t sz)
+idnsGrokReply(const char *buf, size_t sz, IpAddress const *from)
 {
     int n;
     rfc1035_message *message = NULL;
@@ -1053,7 +1053,7 @@ idnsGrokReply(const char *buf, size_t sz
 
             if (q->sz < 0) {
                 /* problem with query data -- query not sent */
-                idnsCallback(static_cast<idns_query *>(q->callback_data), NULL, 0, "Internal error");
+                idnsCallback(static_cast<idns_query *>(q->callback_data), NULL, 0, "Internal error", NULL);
                 cbdataFree(q);
                 return;
             }
@@ -1099,7 +1099,7 @@ idnsGrokReply(const char *buf, size_t sz
 
         if (q->sz < 0) {
             /* problem with query data -- query not sent */
-            idnsCallback(static_cast<idns_query *>(q->callback_data), NULL, 0, "Internal error");
+            idnsCallback(static_cast<idns_query *>(q->callback_data), NULL, 0, "Internal error", NULL);
             cbdataFree(q);
             return;
         }
@@ -1140,7 +1140,7 @@ idnsGrokReply(const char *buf, size_t sz
     /* else initial results were empty. just use the final set as authoritative */
 
     debugs(78, 6, HERE << "Sending " << n << " DNS results to caller.");
-    idnsCallback(q, message->answer, n, q->error);
+    idnsCallback(q, message->answer, n, q->error, from);
     rfc1035MessageDestroy(&message);
     cbdataFree(q);
 }
@@ -1226,7 +1226,7 @@ idnsRead(int fd, void *data)
             continue;
         }
 
-        idnsGrokReply(rbuf, len);
+        idnsGrokReply(rbuf, len, &from);
     }
 }
 
@@ -1271,9 +1271,9 @@ idnsCheckQueue(void *unused)
                    std::setw(5)<< std::setprecision(2) << tvSubDsec(q->start_t, current_time) << " seconds");
 
             if (q->rcode != 0)
-                idnsCallback(q, NULL, -q->rcode, q->error);
+                idnsCallback(q, NULL, -q->rcode, q->error, NULL);
             else
-                idnsCallback(q, NULL, -16, "Timeout");
+                idnsCallback(q, NULL, -16, "Timeout", NULL);
 
             cbdataFree(q);
         }
@@ -1307,7 +1307,7 @@ idnsReadVC(int fd, char *buf, size_t len
            (int) vc->msg->contentSize() << " bytes via tcp from " <<
            nameservers[vc->ns].S << ".");
 
-    idnsGrokReply(vc->msg->buf, vc->msg->contentSize());
+    idnsGrokReply(vc->msg->buf, vc->msg->contentSize(), &nameservers[vc->ns].S);
     vc->msg->clean();
     comm_read(fd, (char *)&vc->msglen, 2 , idnsReadVCHeader, vc);
 }
@@ -1563,7 +1563,7 @@ idnsALookup(const char *name, IDNSCB * c
 
     if (q->sz < 0) {
         /* problem with query data -- query not sent */
-        callback(data, NULL, 0, "Internal error");
+        callback(data, NULL, 0, "Internal error", NULL);
         cbdataFree(q);
         return;
     }
@@ -1608,7 +1608,7 @@ idnsPTRLookup(const IpAddress &addr, IDN
 
     if (q->sz < 0) {
         /* problem with query data -- query not sent */
-        callback(data, NULL, 0, "Internal error");
+        callback(data, NULL, 0, "Internal error", NULL);
         cbdataFree(q);
         return;
     }
diff -pruN a/src/fqdncache.cc b/src/fqdncache.cc
--- a/src/fqdncache.cc	2011-08-31 18:14:07.000000000 +0300
+++ b/src/fqdncache.cc	2011-09-01 00:26:13.000000000 +0300
@@ -494,7 +494,7 @@ static void
 #if USE_DNSSERVERS
 fqdncacheHandleReply(void *data, char *reply)
 #else
-fqdncacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message)
+fqdncacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message, void const *from)
 #endif
 {
     fqdncache_entry *f;
diff -pruN a/src/ipcache.cc b/src/ipcache.cc
--- a/src/ipcache.cc	2011-08-30 08:02:10.000000000 +0300
+++ b/src/ipcache.cc	2011-09-02 11:33:54.000000000 +0300
@@ -93,6 +93,7 @@ public:
     time_t lastref;
     time_t expires;
     ipcache_addrs addrs;
+    IpAddress from;		/* last DNS */
     IPH *handler;
     void *handlerData;
     char *error_message;
@@ -141,7 +142,7 @@ static int ipcacheExpiredEntry(ipcache_e
 #if USE_DNSSERVERS
 static int ipcacheParse(ipcache_entry *, const char *buf);
 #else
-static int ipcacheParse(ipcache_entry *, rfc1035_rr *, int, const char *error);
+static int ipcacheParse(ipcache_entry *, rfc1035_rr *, int, const char *error, void const *from);
 #endif
 static ipcache_entry *ipcache_get(const char *);
 static void ipcacheLockEntry(ipcache_entry *);
@@ -467,7 +468,7 @@ ipcacheParse(ipcache_entry *i, const cha
 
 #else
 static int
-ipcacheParse(ipcache_entry *i, rfc1035_rr * answers, int nr, const char *error_message)
+ipcacheParse(ipcache_entry *i, rfc1035_rr * answers, int nr, const char *error_message, void const *from)
 {
     int k;
     int j = 0;
@@ -621,6 +622,9 @@ ipcacheParse(ipcache_entry *i, rfc1035_r
     else
         i->addrs.count = 255;
 
+    if(na)
+        i->from = from ? (IpAddress *)from : 0;
+
     if (ttl > Config.positiveDnsTtl)
         ttl = Config.positiveDnsTtl;
 
@@ -649,7 +653,7 @@ static void
 #if USE_DNSSERVERS
 ipcacheHandleReply(void *data, char *reply)
 #else
-ipcacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message)
+ipcacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message, void const *from)
 #endif
 {
     ipcache_entry *i;
@@ -662,7 +666,7 @@ ipcacheHandleReply(void *data, rfc1035_r
     ipcacheParse(i, reply);
 #else
 
-    int done = ipcacheParse(i, answers, na, error_message);
+    int done = ipcacheParse(i, answers, na, error_message, from);
 
     /* If we have not produced either IPs or Error immediately, wait for recursion to finish. */
     if (done != 0 || error_message != NULL)
@@ -834,6 +838,15 @@ ipcache_gethostbyname(const char *name,
         IpcacheStats.negative_hits++;
         // ignore i->error_message: the caller just checks IP cache presence
         return NULL;
+    } else if (flags & IP_LOOKUP_NS) {
+        static_addrs.count = 1;
+        static_addrs.cur = 0;
+        static_addrs.in_addrs[0] = i->from;
+        static_addrs.bad_mask[0] = FALSE;
+        static_addrs.badcount = 0;
+        // TODO: ipbtree(i->addrs, &i->from);
+        IpcacheStats.hits++;
+        return &static_addrs;
     } else {
         IpcacheStats.hits++;
         i->lastref = squid_curtime;
@@ -844,6 +857,8 @@ ipcache_gethostbyname(const char *name,
     /* no entry [any more] */
 
     if ((addrs = ipcacheCheckNumeric(name))) {
+        if (flags & IP_LOOKUP_NS)
+            return NULL; // TODO: return ipbtree(addrs, NULL);
         IpcacheStats.numeric_hits++;
         return addrs;
     }
diff -pruN a/src/typedefs.h b/src/typedefs.h
--- a/src/typedefs.h	2011-08-31 17:47:15.000000000 +0300
+++ b/src/typedefs.h	2011-09-01 00:26:13.000000000 +0300
@@ -223,7 +223,7 @@ typedef void HLPCB(void *, char *buf);
 typedef int HLPSAVAIL(void *);
 typedef void HLPSONEQ(void *);
 typedef void HLPCMDOPTS(int *argc, char **argv);
-typedef void IDNSCB(void *, rfc1035_rr *, int, const char *);
+typedef void IDNSCB(void *, rfc1035_rr *, int, const char *, void const *);
 
 typedef double hbase_f(double);
 typedef void StatHistBinDumper(StoreEntry *, int idx, double val, double size, int count);
