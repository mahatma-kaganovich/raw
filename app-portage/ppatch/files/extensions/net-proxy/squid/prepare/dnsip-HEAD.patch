Signed-off-by: Denis Kaganovich <mahatma@eu.by>

diff -pruN squid-3.HEAD-20110902/src/acl/Asn.cc squid-3.HEAD-20110902.fixed/src/acl/Asn.cc
--- squid-3.HEAD-20110902/src/acl/Asn.cc	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/acl/Asn.cc	2011-09-02 14:24:59.000000000 +0300
@@ -45,6 +45,7 @@
 #include "acl/SourceAsn.h"
 #include "acl/DestinationAsn.h"
 #include "acl/DestinationIp.h"
+#include "acl/DnsIp.h"
 #include "HttpReply.h"
 #include "ipcache.h"
 #include "forward.h"
diff -pruN squid-3.HEAD-20110902/src/acl/DnsIp.cc squid-3.HEAD-20110902.fixed/src/acl/DnsIp.cc
--- squid-3.HEAD-20110902/src/acl/DnsIp.cc	1970-01-01 03:00:00.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/acl/DnsIp.cc	2011-09-02 14:51:48.000000000 +0300
@@ -0,0 +1,55 @@
+#include "squid.h"
+#include "acl/DnsIp.h"
+#include "acl/FilledChecklist.h"
+#include "comm/Connection.h"
+#include "HttpRequest.h"
+// for Config.*
+#include "structs.h"
+
+char const *
+ACLDNSIP::typeString() const
+{
+    return "dst";
+}
+
+int
+ACLDNSIP::match(ACLChecklist *cl)
+{
+    ACLFilledChecklist *checklist = Filled(cl);
+
+    // Bug 3243: CVE 2009-0801
+    // Bypass of browser same-origin access control in intercepted communication
+    // To resolve this we will force DIRECT and only to the original client destination.
+    // In which case, we also need this ACL to accurately match the destination
+    if (Config.onoff.client_dst_passthru && checklist->request &&
+            (checklist->request->flags.intercepted || checklist->request->flags.spoof_client_ip)) {
+        assert(checklist->conn() && checklist->conn()->clientConnection != NULL);
+        return ACLIP::match(checklist->conn()->clientConnection->local);
+    }
+
+    const ipcache_addrs *ia = ipcache_gethostbyname(checklist->request->GetHost(), IP_LOOKUP_IF_MISS|IP_LOOKUP_NS);
+
+    if (ia) {
+        /* Entry in cache found */
+
+        for (int k = 0; k < (int) ia->count; k++) {
+            if (ACLIP::match(ia->in_addrs[k]))
+                return 1;
+        }
+
+        return 0;
+    } else if (!checklist->request->flags.destinationIPLookedUp()) {
+        /* No entry in cache, lookup not attempted */
+        debugs(28, 3, "aclMatchAcl: Can't yet compare '" << name << "' ACL for '" << checklist->request->GetHost() << "'");
+        checklist->changeState (DestinationIPLookup::Instance());
+        return 0;
+    } else {
+        return 0;
+    }
+}
+
+ACL *
+ACLDNSIP::clone() const
+{
+    return new ACLDNSIP(*this);
+}
diff -pruN squid-3.HEAD-20110902/src/acl/DnsIp.h squid-3.HEAD-20110902.fixed/src/acl/DnsIp.h
--- squid-3.HEAD-20110902/src/acl/DnsIp.h	1970-01-01 03:00:00.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/acl/DnsIp.h	2011-09-02 14:24:59.000000000 +0300
@@ -0,0 +1,21 @@
+#ifndef SQUID_ACLDNSIP_H
+#define SQUID_ACLDNSIP_H
+#include "acl/DestinationIp.h"
+
+class ACLDNSIP : public ACLDestinationIP
+{
+
+public:
+    MEMPROXY_CLASS(ACLDNSIP);
+
+    virtual char const *typeString() const;
+    virtual int match(ACLChecklist *checklist);
+    virtual ACL *clone()const;
+private:
+    static Prototype RegistryProtoype;
+    static ACLDNSIP RegistryEntry_;
+};
+
+MEMPROXY_CLASS_INLINE(ACLDNSIP);
+
+#endif /* SQUID_ACLDNSIP_H */
diff -pruN squid-3.HEAD-20110902/src/acl/Makefile.am squid-3.HEAD-20110902.fixed/src/acl/Makefile.am
--- squid-3.HEAD-20110902/src/acl/Makefile.am	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/acl/Makefile.am	2011-09-02 14:24:59.000000000 +0300
@@ -43,6 +43,8 @@ libacls_la_SOURCES = \
 	DestinationDomain.h \
 	DestinationIp.cc \
 	DestinationIp.h \
+	DnsIp.cc \
+	DnsIp.h \
 	DomainData.cc \
 	DomainData.h \
 	ExtUser.cc \
diff -pruN squid-3.HEAD-20110902/src/acl/Makefile.in squid-3.HEAD-20110902.fixed/src/acl/Makefile.in
--- squid-3.HEAD-20110902/src/acl/Makefile.in	2011-09-02 03:13:49.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/acl/Makefile.in	2011-09-02 14:24:59.000000000 +0300
@@ -65,6 +65,7 @@ am__libacls_la_SOURCES_DIST = IntRange.c
 	TimeData.cc TimeData.h Asn.cc Asn.h Browser.cc Browser.h \
 	DestinationAsn.h DestinationDomain.cc DestinationDomain.h \
 	DestinationIp.cc DestinationIp.h DomainData.cc DomainData.h \
+	DnsIp.cc DnsIp.h \
 	ExtUser.cc ExtUser.h HierCodeData.cc HierCodeData.h \
 	HierCode.cc HierCode.h HttpHeaderData.cc HttpHeaderData.h \
 	HttpRepHeader.cc HttpRepHeader.h HttpReqHeader.cc \
@@ -95,7 +96,7 @@ am_libacls_la_OBJECTS = IntRange.lo Rege
 	PeerName.lo Protocol.lo ProtocolData.lo Random.lo Referer.lo \
 	ReplyMimeType.lo RequestMimeType.lo SourceDomain.lo \
 	SourceIp.lo Tag.lo Url.lo UrlPath.lo UrlPort.lo UserData.lo \
-	Gadgets.lo $(am__objects_2) $(am__objects_4)
+	Gadgets.lo DnsIp.lo $(am__objects_2) $(am__objects_4)
 libacls_la_OBJECTS = $(am_libacls_la_OBJECTS)
 libapi_la_LIBADD =
 am_libapi_la_OBJECTS = Acl.lo Checklist.lo
@@ -376,6 +377,7 @@ libacls_la_SOURCES = IntRange.cc IntRang
 	TimeData.h Asn.cc Asn.h Browser.cc Browser.h DestinationAsn.h \
 	DestinationDomain.cc DestinationDomain.h DestinationIp.cc \
 	DestinationIp.h DomainData.cc DomainData.h ExtUser.cc \
+	DnsIp.cc DnsIp.h \
 	ExtUser.h HierCodeData.cc HierCodeData.h HierCode.cc \
 	HierCode.h HttpHeaderData.cc HttpHeaderData.h HttpRepHeader.cc \
 	HttpRepHeader.h HttpReqHeader.cc HttpReqHeader.h HttpStatus.cc \
@@ -476,6 +478,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Checklist.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DestinationDomain.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DestinationIp.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DnsIp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/DomainData.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Eui64.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ExtUser.Plo@am__quote@
diff -pruN squid-3.HEAD-20110902/src/AclRegs.cc squid-3.HEAD-20110902.fixed/src/AclRegs.cc
--- squid-3.HEAD-20110902/src/AclRegs.cc	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/AclRegs.cc	2011-09-02 14:24:59.000000000 +0300
@@ -17,6 +17,7 @@
 #include "acl/DestinationAsn.h"
 #include "acl/DestinationDomain.h"
 #include "acl/DestinationIp.h"
+#include "acl/DnsIp.h"
 #include "acl/DomainData.h"
 #if USE_AUTH
 #include "acl/ExtUser.h"
@@ -74,6 +75,8 @@
 #include "ident/AclIdent.h"
 #endif
 
+ACL::Prototype ACLDNSIP::RegistryProtoype(&ACLDNSIP::RegistryEntry_, "dst_dns");
+ACLDNSIP ACLDNSIP::RegistryEntry_;
 
 ACL::Prototype ACLBrowser::RegistryProtoype(&ACLBrowser::RegistryEntry_, "browser");
 ACLStrategised<char const *> ACLBrowser::RegistryEntry_(new ACLRegexData, ACLRequestHeaderStrategy<HDR_USER_AGENT>::Instance(), "browser");
diff -pruN squid-3.HEAD-20110902/src/cf.data.pre squid-3.HEAD-20110902.fixed/src/cf.data.pre
--- squid-3.HEAD-20110902/src/cf.data.pre	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/cf.data.pre	2011-09-02 14:47:17.000000000 +0300
@@ -855,6 +855,12 @@ DOC_START
 	  # effect in rules that affect the reply data stream such as
 	  # http_reply_access.
 
+	acl aclname dst_dns ip-address/mask ...
+	  # match DNS IP address, positive resolved destination domain [slow]
+	  # see also dns_nameservers
+	  # primary designed to failover channel selection
+	  # only for internal DNS resolver
+
 	Examples:
 		acl macaddress arp 09:00:2b:23:45:67
 		acl myexample dst_as 1241
diff -pruN squid-3.HEAD-20110902/src/defines.h squid-3.HEAD-20110902.fixed/src/defines.h
--- squid-3.HEAD-20110902/src/defines.h	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/defines.h	2011-09-02 14:24:59.000000000 +0300
@@ -89,6 +89,7 @@
 #define IDENT_DONE 2
 
 #define IP_LOOKUP_IF_MISS	0x01
+#define IP_LOOKUP_NS		0x02
 
 #define MAX_MIME 4096
 
diff -pruN squid-3.HEAD-20110902/src/dns_internal.cc squid-3.HEAD-20110902.fixed/src/dns_internal.cc
--- squid-3.HEAD-20110902/src/dns_internal.cc	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/dns_internal.cc	2011-09-02 14:57:10.000000000 +0300
@@ -242,7 +242,7 @@ static IOCB idnsSentQueryVC;
 
 static int idnsFromKnownNameserver(Ip::Address const &from);
 static idns_query *idnsFindQuery(unsigned short id);
-static void idnsGrokReply(const char *buf, size_t sz, int from_ns);
+static void idnsGrokReply(const char *buf, size_t sz, int from_ns, void const *from);
 static PF idnsRead;
 static EVH idnsCheckQueue;
 static void idnsTickleQueue(void);
@@ -995,7 +995,7 @@ idnsQueryID(void)
 }
 
 static void
-idnsCallback(idns_query *q, rfc1035_rr *answers, int n, const char *error)
+idnsCallback(idns_query *q, rfc1035_rr *answers, int n, const char *error, void const *from)
 {
     IDNSCB *callback;
     void *cbdata;
@@ -1004,7 +1004,7 @@ idnsCallback(idns_query *q, rfc1035_rr *
     q->callback = NULL;
 
     if (cbdataReferenceValidDone(q->callback_data, &cbdata))
-        callback(cbdata, answers, n, error);
+        callback(cbdata, answers, n, error, from);
 
     while (q->queue) {
         idns_query *q2 = q->queue;
@@ -1013,7 +1013,7 @@ idnsCallback(idns_query *q, rfc1035_rr *
         q2->callback = NULL;
 
         if (cbdataReferenceValidDone(q2->callback_data, &cbdata))
-            callback(cbdata, answers, n, error);
+            callback(cbdata, answers, n, error, from);
 
         cbdataFree(q2);
     }
@@ -1034,8 +1034,9 @@ idnsDropMessage(rfc1035_message *message
     }
 }
 
+// FIXME? reply from 'nameservers[from_ns].S' may be from multiple 'from', then add param
 static void
-idnsGrokReply(const char *buf, size_t sz, int from_ns)
+idnsGrokReply(const char *buf, size_t sz, int from_ns, void const *from)
 {
     int n;
     rfc1035_message *message = NULL;
@@ -1101,7 +1102,7 @@ idnsGrokReply(const char *buf, size_t sz
             // Strange: A TCP DNS response with the truncation bit (TC) set.
             // Return an error and cleanup; no point in trying TCP again.
             debugs(78, 3, HERE << "TCP DNS response");
-            idnsCallback(q, NULL, 0, "Truncated TCP DNS response");
+            idnsCallback(q, NULL, 0, "Truncated TCP DNS response", NULL);
             cbdataFree(q);
         }
 
@@ -1155,7 +1156,7 @@ idnsGrokReply(const char *buf, size_t sz
 
             if (q->sz < 0) {
                 /* problem with query data -- query not sent */
-                idnsCallback(static_cast<idns_query *>(q->callback_data), NULL, 0, "Internal error");
+                idnsCallback(static_cast<idns_query *>(q->callback_data), NULL, 0, "Internal error", NULL);
                 cbdataFree(q);
                 return;
             }
@@ -1240,7 +1241,7 @@ idnsGrokReply(const char *buf, size_t sz
     /* else initial results were empty. just use the final set as authoritative */
 
     debugs(78, 6, HERE << "Sending " << n << " DNS results to caller.");
-    idnsCallback(q, message->answer, n, rfc1035ErrorMessage(n));
+    idnsCallback(q, message->answer, n, rfc1035ErrorMessage(n), from);
     rfc1035MessageDestroy(&message);
     cbdataFree(q);
 }
@@ -1326,7 +1327,7 @@ idnsRead(int fd, void *data)
             continue;
         }
 
-        idnsGrokReply(rbuf, len, ns);
+        idnsGrokReply(rbuf, len, ns, &from);
     }
 }
 
@@ -1374,9 +1375,9 @@ idnsCheckQueue(void *unused)
                    std::setw(5)<< std::setprecision(2) << tvSubDsec(q->start_t, current_time) << " seconds");
 
             if (q->rcode != 0)
-                idnsCallback(q, NULL, -q->rcode, rfc1035ErrorMessage(q->rcode));
+                idnsCallback(q, NULL, -q->rcode, rfc1035ErrorMessage(q->rcode), NULL);
             else
-                idnsCallback(q, NULL, -16, "Timeout");
+                idnsCallback(q, NULL, -16, "Timeout", NULL);
 
             cbdataFree(q);
         }
@@ -1411,7 +1412,7 @@ idnsReadVC(const Comm::ConnectionPointer
     assert(vc->ns < nns);
     debugs(78, 3, HERE << conn << ": received " << vc->msg->contentSize() << " bytes via TCP from " << nameservers[vc->ns].S << ".");
 
-    idnsGrokReply(vc->msg->buf, vc->msg->contentSize(), vc->ns);
+    idnsGrokReply(vc->msg->buf, vc->msg->contentSize(), vc->ns, &nameservers[vc->ns].S);
     vc->msg->clean();
     AsyncCall::Pointer call = commCbCall(5,4, "idnsReadVCHeader",
                                          CommIoCbPtrFun(idnsReadVCHeader, vc));
@@ -1679,7 +1680,7 @@ idnsALookup(const char *name, IDNSCB * c
 
     if (q->sz < 0) {
         /* problem with query data -- query not sent */
-        callback(data, NULL, 0, "Internal error");
+        callback(data, NULL, 0, "Internal error", NULL);
         cbdataFree(q);
         return;
     }
@@ -1724,7 +1725,7 @@ idnsPTRLookup(const Ip::Address &addr, I
 
     if (q->sz < 0) {
         /* problem with query data -- query not sent */
-        callback(data, NULL, 0, "Internal error");
+        callback(data, NULL, 0, "Internal error", NULL);
         cbdataFree(q);
         return;
     }
diff -pruN squid-3.HEAD-20110902/src/fqdncache.cc squid-3.HEAD-20110902.fixed/src/fqdncache.cc
--- squid-3.HEAD-20110902/src/fqdncache.cc	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/fqdncache.cc	2011-09-02 14:24:59.000000000 +0300
@@ -494,7 +494,7 @@ static void
 #if USE_DNSSERVERS
 fqdncacheHandleReply(void *data, char *reply)
 #else
-fqdncacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message)
+fqdncacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message, void const *from)
 #endif
 {
     fqdncache_entry *f;
diff -pruN squid-3.HEAD-20110902/src/ipcache.cc squid-3.HEAD-20110902.fixed/src/ipcache.cc
--- squid-3.HEAD-20110902/src/ipcache.cc	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/ipcache.cc	2011-09-02 14:59:53.000000000 +0300
@@ -96,6 +96,7 @@ public:
     time_t lastref;
     time_t expires;
     ipcache_addrs addrs;
+    Ip::Address from;
     IPH *handler;
     void *handlerData;
     char *error_message;
@@ -142,7 +143,7 @@ static int ipcacheExpiredEntry(ipcache_e
 #if USE_DNSSERVERS
 static int ipcacheParse(ipcache_entry *, const char *buf);
 #else
-static int ipcacheParse(ipcache_entry *, rfc1035_rr *, int, const char *error);
+static int ipcacheParse(ipcache_entry *, rfc1035_rr *, int, const char *error, void const *from);
 #endif
 static ipcache_entry *ipcache_get(const char *);
 static void ipcacheLockEntry(ipcache_entry *);
@@ -456,7 +457,7 @@ ipcacheParse(ipcache_entry *i, const cha
 
 #else
 static int
-ipcacheParse(ipcache_entry *i, rfc1035_rr * answers, int nr, const char *error_message)
+ipcacheParse(ipcache_entry *i, rfc1035_rr * answers, int nr, const char *error_message, void const *from)
 {
     int k;
     int j = 0;
@@ -569,6 +570,9 @@ ipcacheParse(ipcache_entry *i, rfc1035_r
     else
         i->addrs.count = 255;
 
+    if(na)
+        i->from = from ? (Ip::Address *)from : 0;
+
     if (ttl > Config.positiveDnsTtl)
         ttl = Config.positiveDnsTtl;
 
@@ -589,7 +593,7 @@ static void
 #if USE_DNSSERVERS
 ipcacheHandleReply(void *data, char *reply)
 #else
-ipcacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message)
+ipcacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_message, void const *from)
 #endif
 {
     ipcache_entry *i;
@@ -602,7 +606,7 @@ ipcacheHandleReply(void *data, rfc1035_r
     ipcacheParse(i, reply);
 #else
 
-    int done = ipcacheParse(i, answers, na, error_message);
+    int done = ipcacheParse(i, answers, na, error_message, from);
 
     /* If we have not produced either IPs or Error immediately, wait for recursion to finish. */
     if (done != 0 || error_message != NULL)
@@ -774,6 +778,15 @@ ipcache_gethostbyname(const char *name,
         IpcacheStats.negative_hits++;
         // ignore i->error_message: the caller just checks IP cache presence
         return NULL;
+    } else if (flags & IP_LOOKUP_NS) {
+        static_addrs.count = 1;
+        static_addrs.cur = 0;
+        static_addrs.in_addrs[0] = i->from;
+        static_addrs.bad_mask[0] = FALSE;
+        static_addrs.badcount = 0;
+        // TODO: ipbtree(i->addrs, &i->from);
+        IpcacheStats.hits++;
+        return &static_addrs;
     } else {
         IpcacheStats.hits++;
         i->lastref = squid_curtime;
@@ -784,6 +797,8 @@ ipcache_gethostbyname(const char *name,
     /* no entry [any more] */
 
     if ((addrs = ipcacheCheckNumeric(name))) {
+        if (flags & IP_LOOKUP_NS)
+            return NULL; // TODO: return ipbtree(addrs, NULL);
         IpcacheStats.numeric_hits++;
         return addrs;
     }
diff -pruN squid-3.HEAD-20110902/src/typedefs.h squid-3.HEAD-20110902.fixed/src/typedefs.h
--- squid-3.HEAD-20110902/src/typedefs.h	2011-09-02 03:12:21.000000000 +0300
+++ squid-3.HEAD-20110902.fixed/src/typedefs.h	2011-09-02 14:24:59.000000000 +0300
@@ -160,7 +160,7 @@ typedef void HLPCB(void *, char *buf);
 typedef int HLPSAVAIL(void *);
 typedef void HLPSONEQ(void *);
 typedef void HLPCMDOPTS(int *argc, char **argv);
-typedef void IDNSCB(void *, rfc1035_rr *, int, const char *);
+typedef void IDNSCB(void *, rfc1035_rr *, int, const char *, void const *);
 
 typedef double hbase_f(double);
 typedef void StatHistBinDumper(StoreEntry *, int idx, double val, double size, int count);
