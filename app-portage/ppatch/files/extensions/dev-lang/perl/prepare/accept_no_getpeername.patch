Linux accept() make getpeername() if buffer != NULL and close connection on failure.
In current Perl API this make impossible to access socket protocols with 'sock_no_getname'
stub. I want AF_ALG crypto API, but same stub used in can, caif, axrpc, ieee802154 and
other places. Separating this calls and ignoring getpeername() error make this accept()
possible in price of one more socketcall. I use AF_ALG to bound system & versions.

In other words, make accept() success even if getpeername() failed.

--- a/pp_sys.c	2011-09-26 12:44:34.000000000 +0300
+++ b/pp_sys.c	2012-02-26 13:49:42.000000000 +0300
@@ -2544,7 +2544,21 @@ PP(pp_accept)
 	goto nuts;
 
     nstio = GvIOn(ngv);
+#if defined(AF_ALG)
+    /* long way to get address in late Linux: respect special protocols, not supporting getname */
+    /* if namebuf != 0 - Linux make 2-in-1 calls (accept+getname) and close conn if failed both */
+    /* just do similar via separated calls & ignore getname error */
+    fd = PerlSock_accept(PerlIO_fileno(IoIFP(gstio)), NULL, 0);
+    if (fd >= 0) {
+	if (PerlSock_getpeername(fd, (struct sockaddr *) namebuf, &len) < 0) {
+	    namebuf[0] = 0;   /* sun_len */
+	    namebuf[1] = -1;  /* sun_family */
+	    len = 2;
+	}
+    }
+#else
     fd = PerlSock_accept(PerlIO_fileno(IoIFP(gstio)), (struct sockaddr *) namebuf, &len);
+#endif
 #if defined(OEMVS)
     if (len == 0) {
 	/* Some platforms indicate zero length when an AF_UNIX client is
