--- a/include/net/netfilter/nf_conntrack.h	2016-12-11 22:17:54.000000000 +0300
+++ b/include/net/netfilter/nf_conntrack.h	2016-12-22 02:10:53.795535252 +0300
@@ -97,6 +97,9 @@ struct nf_conn {
 
 	/* jiffies32 when this ct is considered dead */
 	u32 timeout;
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	unsigned long use_time;
+#endif
 
 	possible_net_t ct_net;
 
--- a/net/netfilter/Kconfig	2016-12-11 22:17:54.000000000 +0300
+++ b/net/netfilter/Kconfig	2016-12-22 02:01:34.529843915 +0300
@@ -1080,6 +1080,15 @@ config NETFILTER_XT_MATCH_CONNLIMIT
 	  This match allows you to match against the number of parallel
 	  connections to a server per client IP address (or address block).
 
+config NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	bool '"connlimit" only active connections'
+	depends on NETFILTER_XT_MATCH_CONNLIMIT
+	help
+	  Skip keepalive and other not closed inactive connections.
+
+	  N to care memory usage,
+	  Y to care channel usage.
+
 config NETFILTER_XT_MATCH_CONNMARK
 	tristate  '"connmark" connection mark match support'
 	depends on NF_CONNTRACK
--- a/net/netfilter/nf_conntrack_core.c	2016-12-11 22:17:54.000000000 +0300
+++ b/net/netfilter/nf_conntrack_core.c	2016-12-22 02:07:19.230957304 +0300
@@ -776,6 +776,9 @@ __nf_conntrack_confirm(struct sk_buff *s
 	/* Timer relative to confirmation time, not original
 	   setting time, otherwise we'd get timer wrap in
 	   weird delay cases. */
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	ct->use_time = jiffies;
+#endif
 	ct->timeout += nfct_time_stamp;
 	atomic_inc(&ct->ct_general.use);
 	ct->status |= IPS_CONFIRMED;
@@ -1438,6 +1441,10 @@ void __nf_ct_refresh_acct(struct nf_conn
 {
 	NF_CT_ASSERT(skb);
 
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+	ct->use_time = jiffies;
+#endif
+
 	/* Only update if this is not a fixed timeout */
 	if (test_bit(IPS_FIXED_TIMEOUT_BIT, &ct->status))
 		goto acct;
--- a/net/netfilter/xt_connlimit.c	2016-12-11 22:17:54.000000000 +0300
+++ b/net/netfilter/xt_connlimit.c	2016-12-22 02:01:34.529843915 +0300
@@ -42,6 +42,11 @@
 
 #define CONNLIMIT_GC_MAX_NODES	8
 
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+/* 10 sec */
+#define CONNLIMIT_TIMEOUT (10*HZ)
+#endif
+
 /* we will save the tuples of all connections we care about */
 struct xt_connlimit_conn {
 	struct hlist_node		node;
@@ -135,7 +140,8 @@ static unsigned int check_hlist(struct n
 				struct hlist_head *head,
 				const struct nf_conntrack_tuple *tuple,
 				const struct nf_conntrack_zone *zone,
-				bool *addit)
+				bool *addit,
+				const struct nf_conn *ct)
 {
 	const struct nf_conntrack_tuple_hash *found;
 	struct xt_connlimit_conn *conn;
@@ -174,6 +180,20 @@ static unsigned int check_hlist(struct n
 			kmem_cache_free(connlimit_conn_cachep, conn);
 			continue;
 		}
+#ifdef CONFIG_NETFILTER_XT_MATCH_CONNLIMIT_ACTIVE
+		if (found_ct != NULL) {
+			/* count only active connections */
+			if (jiffies - found_ct->use_time > CONNLIMIT_TIMEOUT) {
+				nf_ct_put(found_ct);
+				continue;
+			}
+			/* force to first connections to be active */
+			if (found_ct == ct) {
+				nf_ct_put(found_ct);
+				break;
+			}
+		}
+#endif
 
 		nf_ct_put(found_ct);
 		length++;
@@ -201,7 +221,8 @@ static unsigned int
 count_tree(struct net *net, struct rb_root *root,
 	   const struct nf_conntrack_tuple *tuple,
 	   const union nf_inet_addr *addr, const union nf_inet_addr *mask,
-	   u8 family, const struct nf_conntrack_zone *zone)
+	   u8 family, const struct nf_conntrack_zone *zone,
+	   const struct nf_conn *ct)
 {
 	struct xt_connlimit_rb *gc_nodes[CONNLIMIT_GC_MAX_NODES];
 	struct rb_node **rbnode, *parent;
@@ -229,7 +250,7 @@ count_tree(struct net *net, struct rb_ro
 		} else {
 			/* same source network -> be counted! */
 			unsigned int count;
-			count = check_hlist(net, &rbconn->hhead, tuple, zone, &addit);
+			count = check_hlist(net, &rbconn->hhead, tuple, zone, &addit, ct);
 
 			tree_nodes_free(root, gc_nodes, gc_count);
 			if (!addit)
@@ -245,7 +266,7 @@ count_tree(struct net *net, struct rb_ro
 			continue;
 
 		/* only used for GC on hhead, retval and 'addit' ignored */
-		check_hlist(net, &rbconn->hhead, tuple, zone, &addit);
+		check_hlist(net, &rbconn->hhead, tuple, zone, &addit, ct);
 		if (hlist_empty(&rbconn->hhead))
 			gc_nodes[gc_count++] = rbconn;
 	}
@@ -291,7 +312,8 @@ static int count_them(struct net *net,
 		      const union nf_inet_addr *addr,
 		      const union nf_inet_addr *mask,
 		      u_int8_t family,
-		      const struct nf_conntrack_zone *zone)
+		      const struct nf_conntrack_zone *zone,
+		      const struct nf_conn *ct)
 {
 	struct rb_root *root;
 	int count;
@@ -307,7 +329,7 @@ static int count_them(struct net *net,
 
 	spin_lock_bh(&xt_connlimit_locks[hash % CONNLIMIT_LOCK_SLOTS]);
 
-	count = count_tree(net, root, tuple, addr, mask, family, zone);
+	count = count_tree(net, root, tuple, addr, mask, family, zone, ct);
 
 	spin_unlock_bh(&xt_connlimit_locks[hash % CONNLIMIT_LOCK_SLOTS]);
 
@@ -347,7 +369,7 @@ connlimit_mt(const struct sk_buff *skb,
 	}
 
 	connections = count_them(net, info->data, tuple_ptr, &addr,
-	                         &info->mask, par->family, zone);
+	                         &info->mask, par->family, zone, ct);
 	if (connections == 0)
 		/* kmalloc failed, drop it entirely */
 		goto hotdrop;
