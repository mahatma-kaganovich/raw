Experimental auth via pam_mount.
Usable for diskless to login on mount home. Currently one.
	Adding "remount" flag support and negative result on mount failure.
	On second login verification must be over "remount".
Usage:
	add 2 mounts - first with "remount", second - without.
	"ln -s /proc/mounts /etc/mtab" (or first TODO)
TODO:
	"-n" on remount;
	configurable "failure result";
	concurrent mounts on one point ("if any of writable home...").

Signed-off-by: Denis Kaganovich <mahatma@eu.by>

--- a/src/mount.c	2011-01-21 18:12:26.000000000 +0200
+++ b/src/mount.c	2011-01-21 18:42:41.000000000 +0200
@@ -479,19 +479,24 @@ int do_mount(const struct config *config
 	struct HXdeque *argv;
 	struct HXproc proc;
 	const char *mount_user;
-	int ret;
+	int ret, remount;
 
 	assert(vinfo != NULL);
 
 	ret = pmt_already_mounted(config, vpt, vinfo);
+	remount = kvplist_contains(&vpt->options, "remount");
 	if (ret < 0) {
 		l0g("could not determine if %s is already mounted, "
 		    "failing\n", vpt->volume);
 		return 0;
-	} else if (ret > 0) {
+	} else if (ret > 0 && !remount) {
 		w4rn("%s already seems to be mounted at %s, "
 		     "skipping\n", vpt->volume, vpt->mountpoint);
 		return 1;
+	} else if (ret == 0 && remount) {
+		w4rn("%s need to remount, but not mounted now, "
+		     "skipping\n", vpt->volume, vpt->mountpoint);
+		return 1;
 	}
 	if (!pmt_fileop_exists(vpt->mountpoint)) {
 		if (config->mkmntpoint) {
--- a/src/pam_mount.c	2011-01-21 17:46:25.000000000 +0200
+++ b/src/pam_mount.c	2011-01-21 17:46:19.000000000 +0200
@@ -591,6 +591,8 @@ PAM_EXTERN EXPORT_SYMBOL int pam_sm_open
 	misc_dump_id("Session open");
 	envpath_init(Config.path);
 	ret = process_volumes(&Config, system_authtok);
+	if (ret)
+		goto out;
 
 	/*
 	 * Read luserconf after mounting of initial volumes. This makes it
