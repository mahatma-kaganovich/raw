#!/bin/sh

fs='ext4:-q:-O:sparse_super2:-O:^has_journal:-O:dir_index:-O:^project:-O:^quota:-E:discard:-E:num_backup_sb=0:-b:4096'
#fs="$fs:-O:inline_data:-I:256"
fs="$fs:-O:^inline_data:-I:128"

# no remount
try='dax'

# remount
try1='discard dioread_nolock noblock_validity lazytime nobarrier delalloc'

kv=`uname -r`
[ "${kv%%.*}" -lt 4 ] && fs='ext4:-E:discard'

help="

mount.zram v0.9 (c) mahatma, under Anarchy license
Mount helper to mount zram (or ram/brd) devices via /etc/fstab over most simple way, stupid.
Usage:	mount -t zram ...
	mount.zram /dev/zram<X> <mountpoint> -o <options>
	mount.zram /dev/ram<X> <mountpoint> -o <options>
	mount.zram /dev/ram0 <mountpoint> -o disksize=<N>,<options>
Loading zram module with number of devices just from FIRST mount device in fstab.
(so, first device is highest number)
Loading brd module for /dev/ram0 ONLY.
Mount options:
	'fs=<fs[{:mkfs_options}]> (default fs=$fs, zram fs+=$fs_zram, ram fs+=$fs_ram),
	<zram_param>=<value> where <zram_param> is any file from /sys/block/zramX/
	zramctl=<options> - alternative to sysfs - use zramctl tool (spaces replaced to ':')
	disksize=<N> - for /dev/ram0 - compatible with zram, bound single brd/ram disk to N.
	other options pass directly to <fs> mount.
	First trying to mount with '-o dax,discard...', '-o discard...',
Examples of /etc/fstab:
	/dev/zram3 /tmp zram disksize=8g 0 0
	/dev/zram1 /tmp zram comp_algorithm=lz4,disksize=8g,lazytime,noatime,dioread_nolock 0 0
	/dev/zram0 /var/tmp/portage zram reset=1,comp_algorithm=lz4,disksize=12g,lazytime,sync,noatime,dioread_nolock 0 0
	/dev/ram0 /var/cache/fscache zram disksize=1g,lazytime,dax,dioread_nolock,nobarrier,inode_readahead_blks=0,nodelalloc 0 0
    Over zramctl:
	/dev/zram3 /tmp zram zramctl=-alz4:-s8g 0 0
	/dev/zram3 /tmp zram zramctl=--algorithm=lz4:--size=8g 0 0
"

err(){
	echo "
ERROR $0: $1" >&2
	exit ${2:-1}
}

warn(){
	echo "WARNING $0: ignored failed: $1" >&2
}

size2b(){
	local v="$1" x  l="${2:-1}"
	x="${v%?}"
	case "$v" in
	*k|*K)v=$((x*l));;
	*m|*M)v=$((x*1024*l));;
	*g|*G)v=$((x*1024*1024*l));;
	*t|*T)v=$((x*1024*1024*1024*l));;
	esac
	echo "$v"
}

disksize=
n="${1##*/}"
i="/sys/block/$n"
c="$i"
case "$1" in
/dev/*/*)err "$*$help";;
/dev/zram*)
	nn=${1#/dev/zram}
	[ -e /sys/module/zram -o -e /dev/zram0 ] || modprobe zram num_devices=$((nn+1))
	[ -e "$i" ] || sleep 1
	c="$i/comp_algorithm"
	fs="$fs$fs_zram"
#	try=
;;
/dev/ram0)
	for j in ${4//,/ }; do
		v="${j#disksize=}"
		[ "$v" = "$j" ] || disksize="$(size2b "$v")"
	done
	[ -n "$disksize" ] && modprobe brd rd_nr=1 rd_size="$disksize" max_part=0
;;&
/dev/ram*)
	[ -e "$i" ] || sleep 1
	fs="$fs$fs_ram"
	c="$i/size"
;;
*)err "$*$help";;
esac
[ -z "$c" -o -e "$c" ] || err "no $c"
echo 0 >"$i/queue/rotational"
[ "$3" = '-o' -o "$3" = '' ] || err "invalid option '$3'"
o=
for i in ${4//,/ }; do
	v="${i#*=}"
	[ "$v" = "$i" ] || {
		x="${i%%=*}"
		case "$x" in
		disksize)[ -n "$disksize" ] && continue;; # /dev/ram0
		zramctl) # unify mkfs here?
			c="$x ${v//:/ } $1"
			$c || err "$c"
			continue
		;;
		fs|mode|uid|gid)eval "$x=\"\$v\"";;&
		fs)continue;;
		esac
		f="/sys/block/$n/$x"
		[ -e "$f" ] && {
			e=$(echo "$v" >"$f" 2>&1) && continue
			v1="$(cat "$f")" && [ -n "$v1" ] && ( [ "$v1" = "$v" ] || [ "$v1" = "$(size2b "$v" 1024)" ] || [ -z "${v1##*\[$v\]*}" ] ) && continue
			err "echo \"$v\" >$f - $e"
		}
	}
	o="$o,$i"
done
[ -b "$1" ] || err " -b $1$help"
o="${o#,}"

fs="${fs//:/ }"
mkfs="mkfs.$fs $1"
fs="${fs%% *}"

re=",$4,"
[ -z "${re##*,remount,*}" ] || yes '' | $mkfs || warn "$mkfs"

# move original mountpoint permissions to mount if not fs-assisted
[ -z "$mode" ] && m=`stat "$2" --format='%a'`
[ -z "$uid$gid" ] && ug=`stat "$2" --format='%u:%g'` || ug=

t1="${try1// /,}"
for i in $try ''; do
    for i in "$t1,$i" "$i" ; do
	[ -n "$i" -a -n "$o" ] && i="$i,$o" || i="$i$o"
	mount -t "$fs"${i:+ -o }"$i" "$1" "$2" && {
		case "$i,1" in
		$t1,*);;
		*)for i1 in $try1; do
			mount -t "$fs" -o "remount,$i1${i:+,$i}" "$1" "$2"
		done;;
		esac
		[ -n "$m" ] && chmod -- "$m" "$2"
		[ -n "$ug" ] && chown -- "$ug" "$2"
		exit 0
	}
	r=$?
    done
done
err "mount -t $fs ${o+-o $o} $1 $2" $r
