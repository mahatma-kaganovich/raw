#!/bin/bash

save=/run/power.save

die(){
	echo "$0: $*. Aborting..."
	exit 1
}

onbatt(){
	local i ac
	ac=false
	for i in /sys/class/power_supply/*; do
		[ "$(< "$i/online")" = 1 ] && ac=true
		[ "$(< "$i/present")" = 1 -a "$(< "$i/type")" = Battery -a "$(< "$i/capacity")" != 0 ] || continue
		case "$(< "$i/status")" in
		Discharging|Critical)return 0;;
		Unknown|Charging|Full)return 1;;
		esac
	done 2>/dev/null
	$ac && return 1
	grep -sq "state:.*off-line" /proc/acpi/ac_adapter/*/state || grep -sq "AC Power.*: 0" /proc/pmu/info
}

case "$(< /sys/devices/virtual/dmi/id/uevent)" in
*:pvrThinkPad102nd:*)
	tpt10bat=/usr/share/ya-layout/tpt10-bat/tpt10-bat
	[ -x $tpt10bat ] && ! grep -qs Battery /sys/class/power_supply/*/type &&
	onbatt(){
		$tpt10bat -1 2>&1 |grep -q "Discharging\|Unknown"
	}
;;
esac

save1(){
	[ -e "$2" ] || return 1
	local f y=$1 x=
	shift
	for f in "${@}"; do
		read x <$f &&
		x=${x#*'['} &&
		x=${x%%']'*} &&
		echo "$f $x" >>$save &&
		$echo "$x -> $y => $f" &&
		[ "$x" != "$y" ] &&
		echo "$y" >$f
	done
	return 0
}

fchk(){
	local s
	s="$(stat $1 -c '%u:%g:%f')" || {
		touch $1 && s="$(stat $1 -c '%u:%g:%f')" || die "file '$1' insecure! check & remove"
	}
	[ "$s" = 0:0:8180 ] || die "file '$1' insecure! check & remove"
	[ -s $1 ]
}

balance(){
	[ "$batt" = true ] || /usr/sbin/irqbalance -o -f -t 1 &
}

jiff(){
	sleep 0.1
}

restore(){
    fchk $save.lock
    {
	flock -s 3
	local f x i s b=false
	for s in ${save}1 $save; do
	    fchk $s || continue
	    if $fast; then
		(. $s)
	    else
	      while read f x; do
		case "$f" in
		/sys/*)
#			f=$(readlink -f "$f") && [[ "$f" == /sys/* ]] || continue # paranoid
			$echo "restore $x -> $f"
			echo "$x" >"$f"
		;;
		x86_energy_perf_policy)
			$echo "$f $x"
			($f $x)
		;;
		exit);;
		echo)die "fast mode restore file in secure run";;
		*)die "invalid file '$s' command '$f'";;
		esac
	      done <$s
	    fi
	    [ "$s" = ${save}1 ] && b=true && jiff
	    true >$s
	done
	$b && balance
    } 3>>$save.lock
}

save(){
    fchk $save.lock
    {
	flock 3
	fchk $save && return
	local f i x x1
	$fast || echo exit >>$save
	save1 min_power /sys/class/scsi_host/*/link_power_management_policy
	save1 powersupersave /sys/module/pcie_aspm/parameters/policy
	# must be ordered
#	save1 passive /sys/devices/system/cpu/intel_pstate/status
	for i in /sys/devices/system/cpu/cpu*/cpufreq; do
		save1 powersave "$i/scaling_governor"
		read x <"$i/cpuinfo_min_freq" && {
			save1 "$x" "$i/scaling_max_freq"
			#[ "$(< "$i/scaling_cur_freq")" = "$x" ] ||  echo "$x" >"$i/scaling_cur_freq"
		}
	done
	[ -n "$light" ] &&
	    for i in /sys/class/backlight/*; do
		read x <"$i/max_brightness" &&
#			read x1 <"$i/actual_brightness" && [ "$x1" -gt "$x" ] &&
			x=$[x*light/100] &&
			save1 $x "$i/brightness"
	done
	save1 1 /sys/devices/system/cpu/intel_pstate/no_turbo
	save1 0 /sys/devices/system/cpu/cpufreq/boost
	save1 power /sys/devices/system/cpu/cpu*/cpufreq/energy_performance_preference || {
		f=x86_energy_perf_policy
		$f -r|while read i; do
			x="${i%%:*}"
			x="${x#cpu}"
			[ "$x" = "$[x]" ] || continue
			i="${i##* }"
			echo "$f -c $x $[i]" >>$save
#			$f -c $x 15
		done
		$echo "$f 15"
		$f 15
	}
	[ -n "$cores" ] && [ "$[cores-1]" -lt "$cores" -a "$cores" -ge 0 ] && {
	    save+=1
	    fchk $save
	    sync &
	    i=$!
	    jiff
	    wait $i
	    $fast || echo exit >>$save
	    for i in /sys/devices/system/cpu/cpu*/online; do
		[ -e "$i" ] || break
		[ "$cores" -gt 0 ] || save1 0 "$i"
		cores=$[cores-1]
	    done
	    # single CPU must be balanced. fixme
	    #balance
	}
    } 3>>$save.lock
}


umask 077

echo=true
echo1=echo
cores=
light=
pw=
fast=false

while [ -n "$*" ]; do
case "$1" in
light|cores)declare $1="$2";shift;;
verbose)echo=echo;;
xss|xss-auto)
	shift
	case "$1" in
	on);;
	off|disabled)pw=restore;;&
	*)shift;continue;;
	esac
;;&
powersave|save|power|low|xss)pw=save;;
performance|perf|restore|high)pw=restore;;
auto|bat|batt|xss-auto)
	case "$batt" in
	true|false);;
	*)	onbatt=onbatt
		batt=false
		[ -n "$2" ] && onbatt="$2"
		eval "$onbatt" && batt=true
	;;
	esac
;;&
bat|batt)pw=$batt;;
auto|xss-auto)$batt && pw=save || pw=restore;;
fast)
    fast=true
    save1(){
	[ -e "$2" ] || return 1
	local f y=$1 x=
	shift
	for f in "${@}"; do
		read x <$f &&
		x=${x#*'['} &&
		x=${x%%']'*} &&
		[ "$x" != "$y" ] &&
		echo "$y" >$f &&
		echo "echo $x >$f"
	done >>$save
	return 0
    }
;;
*)
echo "Simple control powersave <-> default & check battery state.
Designed for use in parallel with screen locker on laptop.
Usage: $0 {<opt>} <cmd>
opt is:
 light <brightness_percent>
 cores <num>
 verbose
 fast
cmd is:
 powersave|save|power|low
 performance|perf|restore|high
 auto [<onbatt_test>]
 bat|batt
 xss[-auto] [on|off|...]
Add to sudo:
 echo '%plugdev ALL=(ALL) NOPASSWD: /usr/sbin/ya-nrg' >/etc/sudoers.d/ya-nrg
  or
 echo 'ALL ALL=(ALL) NOPASSWD: /usr/sbin/ya-nrg' >/etc/sudoers.d/ya-nrg
"
pw=
;;
esac
shift
done

${pw:-false}
