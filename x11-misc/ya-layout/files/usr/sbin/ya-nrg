#!/bin/bash

save=/run/power.save

onbatt(){
	local i ac
	ac=false
	for i in /sys/class/power_supply/*; do
		[ "$(< "$i/online")" = 1 ] && ac=true
		[ "$(< "$i/present")" = 1 -a "$(< "$i/type")" = Battery -a "$(< "$i/capacity")" != 0 ] || continue
		case "$(< "$i/status")" in
		Discharging|Critical)return 0;;
		Unknown|Charging|Full)return 1;;
		esac
	done 2>/dev/null
	$ac && return 1
	grep -sq "state:.*off-line" /proc/acpi/ac_adapter/*/state || grep -sq "AC Power.*: 0" /proc/pmu/info
}

case "$(< /sys/devices/virtual/dmi/id/uevent)" in
*:pvrThinkPad102nd:*)
	tpt10bat=/usr/share/ya-layout/tpt10-bat/tpt10-bat
	[ -x $tpt10bat ] && ! grep -qs Battery /sys/class/power_supply/*/type &&
	onbatt(){
		$tpt10bat -1 2>&1 |grep -q "Discharging\|Unknown"
	}
;;
esac

save1(){
	[ -e "$2" ] || return
	local y=${1#*'['} x=
	y=${y%%']'*}
	read x <"$2"
	echo "$2 $x" >>$save
	$echo "$y -> $2"
	[ "$x" = "$y" ] || [[ "$x" == *"[$y]"* ]] || echo "$y" >"$2"
}


restore(){
    {
	flock -s 3
	[ -e $save ] || return
	local f x i s
	for s in ${save}1 $save; do
	    [ -e $s ] || continue
	    while read f x; do
		f=$(readlink -f "$f") && [[ "$f" == /sys/* ]] || continue # paranoid
		$echo "restore $x -> $f"
		echo "$x" >"$f"
	    done <$s
	    unlink $s
	done
    } 3>>$save.lock
}

save(){
    {
	flock 3
	[ -e $save ] && return
	local f i x x1
	for i in /sys/devices/system/cpu/cpu*/cpufreq; do
		save1 powersave "$i/scaling_governor"
		read x <"$i/cpuinfo_min_freq" && {
			save1 "$x" "$i/scaling_max_freq"
			#[ "$(< "$i/scaling_cur_freq")" = "$x" ] ||  echo "$x" >"$i/scaling_cur_freq"
		}
	done
	for i in "min_power:/sys/class/scsi_host/*/link_power_management_policy" ; do
		x=${i%%:*}
		for f in ${x%*:}; do
			save1 "$x" "$f"
		done
	done
	[ -n "$light" ] &&
	    for i in /sys/class/backlight/*; do
		read x <"$i/max_brightness" &&
#			read x1 <"$i/actual_brightness" && [ "$x1" -gt "$x" ] &&
			x=$[x*light/100] &&
			save1 $x "$i/brightness"
	done
	save1 1 /sys/devices/system/cpu/intel_pstate/no_turbo
	save1 0 /sys/devices/system/cpu/cpufreq/boost

	save+=1
	[ -n "$cores" ] && [ "$[cores-1]" -lt "$cores" -a "$cores" -ge 0 ] &&
	    for i in /sys/devices/system/cpu/cpu*/online; do
		[ -e "$i" ] || break
		[ "$cores" -gt 0 ] || save1 0 "$i"
		cores=$[cores-1]
	done
    } 3>>$save.lock
}


umask 077

echo=true
cores=
light=
pw=

while [ -z "$pw" ]; do
case "$1" in
light|cores)declare $1="$2";shift;shift;;
verbose)echo=echo;shift;;
powersave|save|power|low)pw=save;;
performance|perf|restore|high)pw=restore;;
auto|bat|batt)
	case "$batt" in
	true|false);;
	*)	onbatt=onbatt
		batt=false
		[ -n "$2" ] && onbatt="$2"
		eval "$onbatt" && batt=true
	;;
	esac
	$batt && pw=save || pw=restore
;;
bat|batt)pw=$batt;;
*)
echo "Simple control powersave <-> default & check battery state.
Designed for use in parallel with screen locker on laptop.
Usage: $0 {<opt>} <cmd>
opt is:
 light <brightness_percent>
 cores <num>
 verbose
cmd is:
 powersave|save|power|low
 performance|perf|restore|high
 auto [<onbatt_test>]
 bat|batt
Add to sudo:
 echo '%plugdev ALL=(ALL) NOPASSWD: /usr/sbin/ya-nrg' >/etc/sudoers.d/ya-nrg
  or
 echo 'ALL ALL=(ALL) NOPASSWD: /usr/sbin/ya-nrg' >/etc/sudoers.d/ya-nrg
"
pw=false
;;
esac
done

$pw
