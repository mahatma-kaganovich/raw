#!/sbin/runscript

: ${OCFS2_FSCK:="-fy"}

depend() {
	need net localmount
	before netmount
	after drbd
}

pseudofs() {
	[ -n "`mount -l -t $1`" ] && return 0
	ewarn "OCFS2: Pseudo-filesystem $1 are not mounted."
	ewarn "Make sure you have following lines in your /etc/fstab:"
	ewarn "none         $2         $1        defaults                0 0"

	# Why not?
	ebegin "Mounting $1"
	mount -t $1 none $2 && [ -n "`mount -l -t $1`" ]
	eend $? || return 1
}

fmod() {
	[[ -e "$1" ]] && return 0
	modprobe -s $2 && [[ -e "$1" ]] &&  return 0
	eerror "OCFS2: Module '$2' failed, '$1' not found"
	return 1
}

# unsure about possibility to keep heartbeat unclean after correct umount
# but Oracle do so
clean_heartbeat(){
	local err=0 id
	for i in "/sys/kernel/config/cluster/$1/heartbeat"/*; do
		[[ -d "$i" ]] || continue
		id="${i##*/}"
		ebegin "Cleaning OCFS2 heartbeat region $1/$id"
		[[ "`/sbin/ocfs2_hb_ctl -I -u "$id" | grep -o " [0-9]* refs$"`" == " 0 refs" ]] && /sbin/ocfs2_hb_ctl -K -u "$id"  || ! [[ -d "$i" ]]
		eend $? || err=1
	done
	return $err
}

stop_cluster(){
	if clean_heartbeat $1 || [[ "${OCFS2_FORCE_STOP}" == yes ]]; then
		ebegin "Stopping OCFS2 cluster '$1'"
		/sbin/o2cb_ctl -H -n $1 -t cluster -a online=no >/dev/null
		eend $? || return 1
	else
		return 1
	fi
}

start() {
	(	fmod /sys/fs/ocfs2 ocfs2 &&
		fmod /sys/fs/ocfs2/cluster_stack ocfs2_stackglue &&
		pseudofs configfs /sys/kernel/config &&
		pseudofs ocfs2_dlmfs /dlm
	) || return 1
	echo o2cb >/sys/fs/ocfs2/cluster_stack 2>/dev/null
	if [[ "`cat /sys/fs/ocfs2/cluster_stack`" != "o2cb" ]]; then
		eerror "OCFS2: Stack 'o2cb' not loaded. Check your kernel config."
		return 1
	fi

	for cluster in ${OCFS2_CLUSTER}; do
		ebegin "Starting OCFS2 cluster '${cluster}'"
		/sbin/o2cb_ctl -H -n ${cluster} -t cluster -a online=yes >/dev/null
		if ! eend $? ; then
			local OCFS2_FORCE_STOP=no
			stop_cluster $cluster
			return 1
		fi

		# Some heartbeat tweaks to prevent self-fencing quite so much during heavy load.
		# http://oss.oracle.com/projects/ocfs2/dist/documentation/ocfs2_faq.html

		# How long to wait before a node is considered dead from lack of network activity.
		echo $OCFS2_IDLE_TIMEOUT_MS > /sys/kernel/config/cluster/${cluster}/idle_timeout_ms
		# How often we should attempt to send heartbeats.
		echo $OCFS2_KEEPALIVE_DELAY_MS > /sys/kernel/config/cluster/${cluster}/keepalive_delay_ms
		echo $OCFS2_RECONNECT_DELAY_MS > /sys/kernel/config/cluster/${cluster}/reconnect_delay_ms
		# How many interations before a node is considered dead from lack of IO activity.
		# (dead_threshold - 1) * 2s
		echo $OCFS2_DEAD_THRESHOLD > /sys/kernel/config/cluster/${cluster}/heartbeat/dead_threshold
	done
	sleep 2

	# Voluntary fsck. Will be happened only ondemand -
	# on both unmounted/double fault, placed in fstab.
	local i
	for i in `mount -invfat ocfs2 2>/dev/null|sed -e 's: .*::g'` ; do
		[[ -e "$i" ]] || continue
		einfo "OCFS2: Trying 'fsck.ocfs2 $OCFS2_FSCK $i' (fs check if possible)"
		fsck.ocfs2 $OCFS2_FSCK "$i" 2>/dev/null
	done

	# Any behaviour
	ebegin "Mounting OCFS2 filesystems"
	mount -at ocfs2
	eend $?
	return $?
}

umount_fuser(){
	local i w=false
	# trick to faster logic
	while true; do
		( umount -v $* 2>&1 && break ) | grep "^umount: .*: device is busy\.\$" | sed -e 's%^umount: \(.*\): device is busy\.$%\1%g' | while read i; do
			einfo "device '$i' is busy by users:"
			fuser -"${OCFS2_UMOUNT_KILL}" -mMv"${OCFS2_UMOUNT_KILL:+k}" "$i"
			w=true
		done
		umount $* && return 0
		if $w; then
			einfo "Sleeping 1 while killing processes"
			sleep 1
			umount $* && return 0
		fi
		return 1
	done
	return 0
}

# trying to umount ASAP to keep cluster clean
_umount(){
	umount_fuser $* && return 0
	einfo "Direct umount failed, remounting readonly & sleeping 1"
	umount -r $* && {
		sleep 1
		umount $* && return 0
		einfo "Alredy read-only, unmounting lazy & sleeping 3"
		umount -l $*
		sleep 2
	}
	sleep 1
	umount $*
	return $?
}

stop() {
	local ret
	ebegin "Unmounting OCFS2 filesystems"
	_umount -at ocfs2
	eend $?
	ret=$?

	for cluster in ${OCFS2_CLUSTER}; do
		stop_cluster $cluster || ret=1
	done
	return $ret
}

