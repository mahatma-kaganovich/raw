#!/sbin/runscript
# Portions Copyright 1999-2006 Gentoo Foundation
# + Copyright mahatma
# Distributed under the terms of the GNU General Public License v2

: ${OCFS2_FSCK:="-fy"}

depend() {
	need net localmount
	before netmount 
}

pseudofs() {
	[ -n "`mount -l -t $1`" ] && return 0
	ewarn "Pseudo-filesystem $1 are not mounted."
	ewarn "Make sure you have following lines in your /etc/fstab:"
	ewarn "none         $2         $1        defaults                0 0"

	# Why not?
	ebegin "Mounting $1"
	if mount -t $1 none $2 && [ -n "`mount -l -t $1`" ] ; then
		eend 0
		return 0
	fi
	eend 1
	return 1
}

start() {
	# Modules will be loaded on mount, no other checks.
	# Unless other modules will be failed to configure.
	pseudofs configfs /sys/kernel/config || return 1
	pseudofs ocfs2_dlmfs /dlm || return 1

	einfo "Starting OCFS2 cluster"
	for cluster in ${OCFS2_CLUSTER}; do
		ebegin " - ${cluster}"
		/sbin/o2cb_ctl -H -n ${cluster} -t cluster -a online=yes >/dev/null 2>&1
		eend $? || return 1

		# Some heartbeat tweaks to prevent self-fencing quite so much during heavy load.
		# http://oss.oracle.com/projects/ocfs2/dist/documentation/ocfs2_faq.html

		# How long to wait before a node is considered dead from lack of network activity.
		echo $OCFS2_IDLE_TIMEOUT_MS > /sys/kernel/config/cluster/${cluster}/idle_timeout_ms
		# How often we should attempt to send heartbeats.
		echo $OCFS2_KEEPALIVE_DELAY_MS > /sys/kernel/config/cluster/${cluster}/keepalive_delay_ms
		echo $OCFS2_RECONNECT_DELAY_MS > /sys/kernel/config/cluster/${cluster}/reconnect_delay_ms
		# How many interations before a node is considered dead from lack of IO activity.
		# (dead_threshold - 1) * 2s
		echo $OCFS2_DEAD_THRESHOLD > /sys/kernel/config/cluster/${cluster}/heartbeat/dead_threshold
	done
	sleep 2

	# Voluntary fsck. Will be happened only ondemand -
	# on both unmounted/double fault, placed in fstab.
	local i
	for i in `mount -invfat ocfs2 2>/dev/null|sed -e 's: .*::g'` ; do
		[[ -e "$i" ]] || continue
		einfo "Trying 'fsck.ocfs2 $OCFS2_FSCK $i'"
		fsck.ocfs2 $OCFS2_FSCK "$i" 2>/dev/null
	done

	# Any behaviour
	ebegin "Mounting OCFS2 filesystems"
	mount -at ocfs2
	eend $?
}

stop() {
	# Shamelesly stolen from netmount
	local ret
	ebegin "Unmounting OCFS2 filesystems"
	[ -z "$(umount -art ocfs2 2>&1)" ]
	ret=$?
	eend ${ret} "Failed to simply unmount filesystems"
	[ ${ret} -eq 0 ] && return 0

	declare -a siglist=( "TERM" "KILL" "KILL" )
	local retry=0
	local remaining="go"

	while [ -n "${remaining}" -a ${retry} -lt 3 ]
	do
		remaining="$(awk '$3 ~ /'ocfs2'/ { if ($2 != "/") print $2 }' /proc/mounts | sort -r)"
		IFS=$'\n'
		set -- ${remaining//\\040/ }
		unset IFS
		[ -z "${remaining}" ] && break

		ebegin $'\t'"Unmounting ocfs2 filesystems (retry #$((retry+1)))"
		/bin/fuser -k -${siglist[$((retry++))]} -m "$@" &>/dev/null
		sleep 5
		umount "$@" &>/dev/null
		eend $? $'\t'"Failed to unmount filesystems"
	done

	einfo "Stopping OCFS2 cluster" 
	for cluster in ${OCFS_CLUSTERS}; do
		ebegin " - ${cluster}"
		/sbin/o2cb_ctl -H -n ${cluster} -t cluster -a online=no >/dev/null 2>&1
		eend $?
	done
}
