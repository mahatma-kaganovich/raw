#!/bin/sh
## pnp modules bootloader v0.9
## (c) Denis Kaganovich, under Anarchy license
## consume preprocessed /lib/modules/$KV/modules.alias

[[ -z "$KV" ]] && KV=`uname -r`
[[ -z "$TMPDIR" ]] && [[ -e /temp ]] && TMPDIR="/temp"

single(){
	grep -qF ">$1<" "${PNP_TMP}.$2" && return 1
	echo ">$1<" >>"${PNP_TMP}.$2"
	return 0
}

mod(){
	local m m1 m2
	for m in $(echo -ne "$*" | sed -e 's/-/_/g') ; do
		$CHK && ( single "$m" 0 || continue )
		alias2 "$m" || continue
		if $FAST ; then
			case $PARALLEL in
			no) ;;
			0) ;;
			2)
				m2=""
				for m1 in $ALIAS ; do
					modparam $m1
					m2="$m2 insmod "$m1" $PARAM ;"
				done
				eval "( ${m2%;} ) >/dev/null 2>&1 &"
				pids="$pids$! "
				continue
			;;
			*)
				pids="$pids$pid "
				pid=""
			;;
			esac
			
			for m1 in $ALIAS ; do
				modparam $m1
				wait $pid
				$cmd_quiet || echo -ne "\033[0G\033[0K$LCOUNT	$m1 $PARAM"
				insmod "$m1" $PARAM >/dev/null 2>&1 &
				pid="$!"
			done
		else
		if ! [[ $PARALLEL == 0 ]] ; then
			pids="$pids$pid "
			pid=""
		fi
		for m1 in $ALIAS ; do
			m2=`echo -ne "$m1" | sed -e 's:.*/::g' -e 's/-/_/g' -e 's/\...$//'`
			[[ "$m" == "$m2" ]] || single "$m2" 0 || continue
			modparam $m1
			wait $pid
			$cmd_quiet || echo -ne "\033[0G\033[0K$LCOUNT	$m1 $PARAM"
			insmod "$m1" $PARAM >/dev/null 2>&1 &
			pid="$!"
		done
		fi
	done
}

refresh(){
	LCOUNT="${LCOUNT}."
	echo -ne "\033[0G\033[0K$LCOUNT"
	local i j l
	
	wait $pid $pids
	pid=""
	pids=""

	if $FAST ; then
		sed -e 's%^\([^ 	]*\)[	 ]*.*$%>\1<%g' </proc/modules >"${PNP_TMP}".1
		cat `grep -ls "^DRIVER=" $(find /sys -name uevent -print 2>/dev/null) </dev/null` </dev/null |grep "^DRIVER=\|^MODALIAS="|sed -e 's%-%_%g' -e 's%^.*=\(.*\)$%>\1<%g' >>"${PNP_TMP}".1
		sort -u "${PNP_TMP}".1 >"${PNP_TMP}".0
		[[ "$(cat ${PNP_TMP}.1)" == "$(cat ${PNP_TMP}.2)" ]] && return 1
		if ! $cmd_quiet ; then
			echo -ne "\033[0G\033[0K${BOLD}   ::${NORMAL}Loaded:"
			for i in $(sort -m ${PNP_TMP}.0 ${PNP_TMP}.3 | uniq -u) ; do
				i="${i#>}"
				i="${i%<}"
				[[ "$1" == "n" ]] && echo "$i" >>/nopnp.lst
				echo -ne " $i"
			done
			echo ""
		elif $cmd_unload && [[ "$1" == "n" ]] ; then
			sort -m ${PNP_TMP}.0 ${PNP_TMP}.3 | uniq -u >>/nopnp.lst
		fi
		cp "${PNP_TMP}".1 "${PNP_TMP}".2
		cp "${PNP_TMP}".0 "${PNP_TMP}".3
		return 0
	fi

	l="\033[0G\033[0K${BOLD}   ::${NORMAL}Loaded:"
	while read i j; do
		single "$i" 1 || continue
		[[ "$1" == "n" ]] && echo "$i" >>/nopnp.lst
		$cmd_quiet || echo -ne "$l $i"
		l=""
	done </proc/modules
	cp "${PNP_TMP}".1 "${PNP_TMP}".0
	[[ -z "$l" ]] || return 1
	$cmd_quiet || echo ""
	return 0
}

count(){
	[[ "${LCOUNT#????????????????}" == "${LCOUNT}" ]] && return 0
	bad_msg "Deadloop?"
	return 1
}

load_aliases(){
	local i m
	while  count ; do
		if $FAST ; then
			# "sort -u" breaks bus order, but speedup boot
			mod $MDOLIST `cat $(find /sys -name modalias -print 2>/dev/null) </dev/null 2>/dev/null|sort -u'`
		else
		for i in `find /sys -name modalias -print 2>/dev/null` ; do
			if [[ -e "$i" ]] && read m <"$i" ; then
				mod $m
			fi
		done
		mod $MDOLIST
		fi
		refresh || break
		[[ -n "$SDELAY" ]] && sleep "$SDELAY"
	done
}

mod_unload(){
	if ! [[ -e ${NEW_ROOT}/lib/modules/$KV ]] ; then
		if ${cmd_autoinstall:-false} ; then
			echo -ne "(Installing /lib/modules/$KV)"
			mount -o remount,rw ${NEW_ROOT} &&
			cp -a /lib/modules/$KV ${NEW_ROOT}/lib/modules/$KV
		else
			echo -ne '(use "autoinstall" to install modules)'
		fi
	fi
	umount /lib
	local i l m=""
	l=""
	( $cmd_unload && [[ -n "$REAL_ROOT" ]] && [[ -e "/nopnp.lst" ]] ) || return
	echo -n "(removing unlocked modules"
	while read i; do
		i="${i#>}"
		l="${i%<} $l"
	done </nopnp.lst
	i="$(cat /proc/modules)"
	while [[ "$i" != "$m" ]]; do
		m="$i"
		echo -n "."
		rmmod $l >/dev/null 2>&1
		i="$(cat /proc/modules)"
	done
	echo -n ")"
}

pnp_options(){
	PARALLEL=0
	FAST=true
	cmd_nofb=false
	cmd_nopnp=false
	cmd_unload=false
	local i
	local p="*) PARAM='' ;;
esac
}"
	while [[ -n "$*" ]] ; do
	i="$1"
	shift
	case "$i" in
	slow) FAST=false ;;
	parallel-startup) PARALLEL=1 ;;
	parallel-startup=*) PARALLEL="${i#*=}" ;;
	moduleparam=*)
		i="${i#*=}"
		p="*/${i%%:*}.ko) PARAM=\"${i#*:}\" ;;
$p"
	;;
	*=*) export cmd_${i%%=*}="${i#*=}" ;;
	*) export cmd_${i}=true ;;
	esac
	done
	p="modparam(){
case \$1 in
$p"
	echo "$p" >/modparam.sh
	$cmd_quiet && good_msg(){ return; }
}

pnp_init(){
	pnp_options
	if [[ -f /lib.loopfs ]]; then
		echo "









"
		for i in `find /lib/modules -name "*.ko"` ; do
			insmod $i
		done
		mount /lib.loopfs /lib -o loop
	fi
}

override_modprobe(){
local f="/sbin/modprobe"
[[ -e $f ]] && ! grep -q "bug #197730" $f && return
echo '#!/bin/sh
KV=`uname -r`
cd /lib/modules/$KV
. /modparam.sh
. ./modules.alias.sh
while [[ "${1#-}" != "$1" ]] ; do
	shift
done
r=1
alias2 "$(echo -ne "$1" | sed -e s/-/_/g)" && for i in $ALIAS ; do
	modparam $i
	insmod $i $PARAM
	r=$?
done
exit $r' >$f
chmod 755 $f
echo "$f" >/proc/sys/kernel/modprobe
}

wild(){
	grep "$1" <modules.other|grep -v "${2:-x--}"|sed -e 's:.*/::g' -e 's/\...$//g'
}

cpufreq(){
	local l=""
	local CHK=false
	local w="$(wild $@)"
	for i1 in $w ; do
		mod $i1
		wait $pid $pids
		pid=""
		pids=""
		for i in `grep -ls "$i1" $(find /sys/devices/system/cpu -name scaling_driver 2>/dev/null) </dev/null | sed -e 's:/scaling_driver::g'` ; do
			read i2 <"$i/cpuinfo_transition_latency" >/dev/null 2>&1 || continue
			[[ "$i2" -gt "${l:=${i2}}" ]] && continue
			if [[ "$i2" == "$l" ]] ; then
				[[ "${freq#*${i1} }" == "$freq" ]] && freq="$freq$i1 "
			else
				freq=" $i1 "
			fi
		done
		rmmod $i1 >/dev/null 2>&1
	done
	rmmod $w >/dev/null 2>&1
}

cpufreq_gov(){
	local gov1=""
	for i1 in ${gov:-ondemand conservative} ; do
		mod cpufreq_${i1}
		wait $pid $pids
		pid=""
		pids=""
		for i in `find /sys/devices/system/cpu -name scaling_governor 2>/dev/null` ; do
			echo $i1 >"$i" 2>/dev/null
			read i2 <"$i"
			[[ "$i2" == "$i1" ]] || gov1="$gov1 $i"
		done
		rmmod cpufreq_${i1} >/dev/null 2>&1
		[[ -z "$gov1" ]] && break
	done
}

syspnp(){
	local PNP_TMP="${TMPDIR}/pnp.found" NOTLOADED="" CHK=true i i1 i2 gov="" freq="" pid="" pids=""

	[[ -e "/lib/modules/${KV}/modules.alias.sh" ]] || return
	eval "pnp_options $(cat /proc/cmdline)" # parsing
	$cmd_nopnp && return
	. /modparam.sh
	cd "/lib/modules/${KV}"
	good_msg "Searching pnp"
	for i in 0 1 2 3 ; do
		echo -ne "" >"${PNP_TMP}.$i"
	done
	refresh n
	override_modprobe
	LCOUNT=""
	. "./modules.alias.sh"

	if ! $FAST ; then
		if [[ -n "$MDOLIST" ]]; then
			mod $MDOLIST
			refresh
		fi
		single usb_storage 0
	fi
	load_aliases

	## some hand-made autoloads

	$cmd_nofb || [[ -z "$(cat /proc/fb 2>/dev/null)" ]] || mod fbcon
	while read i i1 ; do
		case $i in
#		usual_tables) mod usb_storage ;; # on demand
		usbcore) mod usb_storage ;; # user-frendly
#		thermal_sys) mod fan ;;
		esac
	done </proc/modules
	# frost. save your silicon (and power)
	# autoload cpufreq driver in price of at least one more unload
	# just speedup probing by vendor
	case "$(grep "^vendor_id" /proc/cpuinfo)" in
	*AMD*)
		cpufreq powernow
		: ${gov:=conservative ondemand}
	;;
	*Intel*) cpufreq acpi-cpufreq ;;
	esac
	[[ -z "$freq" ]] && cpufreq cpufreq "drivers/cpufreq/\|powernow"
	mod $freq
	cpufreq_gov
	rmmod freq_table >/dev/null 2>&1

	refresh
#	good_msg "Filtering pnp modules"
	while count ; do
		for i in $cmd_loadall ; do
			[[ "$i" == 'true' ]] && i=''
			i1="${i%%:*}"
			i2="${i#*:}"
			[[ -z "$i1" ]] && i1=".*"
			# default: exclude slow probe, fatal to unload, etc
			[[ "$i2" == "$i" ]] && i2='/tcrypt.ko\|/paride/\|/media/\|/sound/\|/microcode\.\|/isdn/\|/net/\|/video/'
			mod $(wild "$i1" "$i2")
		done
		[[ -z "$cmd_loadall" ]] && [[ "$NODETECT" != '1' ]] &&
		for i1 in ${MY_HWOPTS} ; do
			if [[ -e "/etc/modules/$i1" ]] ; then
				for i in `cat /etc/modules/$i1` ; do
					grep -q "^$i\$" "modules.pnp" || mod "$i"
				done
			else
				mod $(wild "/${i1}[./]")
			fi
		done
		refresh n || break
		load_aliases
	done
	MY_HWOPTS=""
	MDOLIST=""
	echo -ne "\033[0G\033[0K"
	good_msg "Boot time: $(cat /proc/uptime)"
	if [[ -n "${NOTLOADED}" ]] ; then
		good_msg "Not loaded:$NOTLOADED"
		# try again
		MDOLIST="$NOTLOADED"
	fi
	rm "${PNP_TMP}".?
	cd /
}

[[ "$1" == "init" ]] && syspnp $* # debug
