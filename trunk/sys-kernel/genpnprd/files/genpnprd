#!/bin/bash
## fix genkernel initrd
## adding PNP
## (c) Denis Kaganovich
## under Anarchy license

#FILES="/bin/busybox"
FILES="/bin/busybox /sbin/blkid"
DATA="/usr/share/genpnprd"
#UROOT="$ROOT"
UROOT=""
home="`pwd`"
PNPONLY=false
GENKERNEL=true
LIBLOOP=true
MAKEOPTS="-j2 -s"

PNPMODE=""
PKGFILES=""
PACKAGES=""
OVERLAY=""
IMAGE=""
CLEAN=""
CRAMFS=""
LZMA=""
susp_sig=""

: ${TMPDIR:="$ROOT/var/tmp"}
tmp="$TMPDIR/genpnprd.$$"


die(){
	echo "Error $*"
	rm "$tmp" -Rf
	exit 1
}

genpkg(){
	"$1" "$2" "$3" "$4" "$5"
}

preserve_start(){
	echo "Preserving unpacked /lib"
	local m mm="$rcdir/lib/modules/${KV}"
	$PNPONLY && source "$mm/modules.alias.sh"
	for m in $* ; do
		if $PNPONLY; then
			modalias $m
			echo "$ALIAS" >>"$tmp/modules.lst"
		else
			grep "/$m\..*:" "${mm}/modules.dep" >>"$tmp/modules.lst" || find "${mm}" -name "$m.ko" >>"$tmp/modules.lst"
		fi
	done
	cd "$rcdir" || die
	mkdir "$tmp/preserve" || die
	cd "lib/modules/$KV"
	echo "/bin/busybox /bin/mount /bin/sh /bin/uname /sbin/mdev" >"$tmp/preserve.lst"
	for m in `cat $tmp/modules.lst` ; do
		m="${m%:}"
		echo "/lib/modules/$KV/${m#*/lib/modules/$KV/}" >>"$tmp/preserve.lst"
		$PNPONLY || ( [[ -e "$mm/modules.dep" ]] && grep "^$m:" "$mm/modules.dep" >>"$tmp/_modules.dep" )
	done
	ROOT="$rcdir" bash "$UROOT/usr/share/genpnprd/genpkgrd" "$tmp/preserve" "$(cat "$tmp/preserve.lst")" >/dev/null
	mv "$tmp/_modules.dep" "$tmp/preserve/lib/modules/${KV}/modules.dep" 2>/dev/null
	$PNPONLY || /usr/bin/perl "$UROOT/usr/share/genpnprd/mod2sh.pl" "$tmp/preserve/lib/modules/${KV}"
	cd "$rcdir"
	if ! $LIBLOOP; then
		mv "$rcdir"/{etc,sys,proc,sbin/mdev} "$tmp/preserve/" || die
		find .|sort|while read m; do
			[[ "$m" == ./* ]] || continue
			m="${m#./}"
			if ! [[ -e "$tmp/preserve/$m" ]]; then
#				[[ -f "$m" ]] || continue
				[[ -L "$m" ]] && cp "$m" "$tmp/preserve" --parents -a
			fi
			[[ -e "$tmp/preserve/$m" ]] && rm "$m" 2>/dev/null
		done
	fi
}

preserve_end(){
	mv "$tmp/preserve/lib"/* "$rcdir/lib/" -f
	rm "$tmp/preserve" -Rf
}

squashfs_enabled(){
	[[ "$CRAMFS" != 1 ]] && [[ -e "$rcdir/lib/modules/$KV/kernel/fs/squashfs" ]] && return 0
	return 1
}

kmake(){
	make -C "$S" $* $MAKEOPTS || die
}

IMAGE=""
PNPMODE=""
OVERLAY=""
S=""
KV=""

i=0
while [[ -n "$*" ]]; do
	case "$1" in
	--*)
		x="${1#--}"
		shift
		export $x="$1"
	;;
	*)
		let i=i+1
		case $i in
		1)IMAGE="$1";;
		2)PNPMODE="$1";;
		3)OVERLAY="$1";;
		4)S="$1";;
		esac
	;;
	esac
	shift
done

[[ -z "$IMAGE" ]] && {
	echo "Usage:	$0 <image> [nopnp|pnponly|pnp [<overlay> [sources]]]
or	$0 {--<option> <value>}
Options: IMAGE, PNPMODE, OVERLAY, S,
	FILES, PKGFILES, PACKAGES, CLEAN, CRAMFS, MAKEOPTS, KV
	- and other internal variables
Examples: $0 initrd.cpio
	- create initrd image from current environment
	- (required: --FILES '$FILES')
	$0  initrd.cpio --S /usr/src/linux
	- create initrd image from compiled '/usr/src/linux' sources
	$0 --IMAGE initrd.cpio \\
		--PACKAGES 'sys-apps/util-linux sys-fs/*' \\
		--CLEAN '/usr/share/doc /usr/share/man /usr/include' \\
		--CRAMFS 1
	- create rescue image with fs-tools and cramfs (vs. squashfs)"
	exit
}

SQUASH=false
[[ -e "$tmp" ]] && rm "$tmp" -Rf
mkdir $tmp || die
rcdir="$tmp/rc"
[[ -e "$rcdir" ]] && rm "$tmp" -Rf
mkdir "$rcdir" || die
cd "$rcdir" || die

rcfile="$(readlink -f $IMAGE)"
if [[ -f "$rcfile" ]]; then
	( gzip -dc $rcfile | cpio -i ) || cpio -i <$rcfile || die "must be [gzipped] cpio file"
	if [[ -n "$OVERLAY" ]]; then
		if $LIBLOOP; then
			mkdir lib/root || die
			cp "$OVERLAY" lib/root -aT
			for i in lib lib32 lib64; do
				[[ -d lib/root/$i ]] && mv lib/root/$i/* $i/
			done
			rm lib/root/{lib,lib32,lib64} -Rf
		else
			cp "$OVERLAY" "$rcdir" -aT
		fi
	fi
else
	echo "Generating new image '$IMAGE'"
	[[ -n "$OVERLAY" ]] && cp "$OVERLAY" "$rcdir" -aT
	mkdir "$rcdir"/{etc,dev,sys,proc,bin,sbin}
	ln -s "../etc/syspnp" "$rcdir/sbin/init"
	ln -s "etc/syspnp" "$rcdir/linuxrc"
	ln -s "etc/syspnp" "$rcdir/init"
	x=""
	for i in $FILES; do
		x="$x $(which $i 2>/dev/null||echo "$i")"
	done
	bash "$UROOT/usr/share/genpnprd/genpkgrd" "$rcdir" "$x" "$PKGFILES" "$PACKAGES"
	for i in $CLEAN; do
		i=`readlink -f "$rcdir/$i"` || continue
		[[ "${i#$rcdir/}" == "$i" ]] && continue
		rm "$i" -Rf
	done
	for i in "[" ash cat cut echo mount sh uname ; do
		ln -s busybox "$rcdir/bin/$i" &>/dev/null
	done
	if [[ -n "$OVERLAY" ]] && [[ -e "$OVERLAY/lib/modules" ]]; then
		echo "Using '$OVERLAY/lib/modules'"
	elif [[ -z "$S" ]]; then
		m="$ROOT/lib/modules/${KV:=`uname -r`}"
		S="$m/source"
		echo "Copying modules from $m"
		[[ -e "$m/modules.dep" ]] || die "No $m/modules.dep"
		mkdir -p "$rcdir/lib/modules/$KV"
		# long path against symlinks
		for f in "$m"/* `cat "$m/modules.dep"`; do
			f="${f%:}"
			[[ "${f#/}" == "$f" ]] && f="$m/$f"
			[[ -f "$f" ]] || continue
			x="$rcdir/${f#$ROOT}"
			[[ -f "$x" ]] && continue
			[[ -d "${x%/*}" ]] || mkdir -p "${x%/*}"
			cp "$f" "$x" -aTL
		done
		echo "Copying firmware"
		cp -aL "$ROOT/lib/firmware" "$rcdir/lib/firmware"
	else
	    c="$S/.config"
	    if ! [[ -e "$c" ]]; then
		echo "No '$c', configuring and build kernel"
		kmake defconfig
		i="$ROOT/etc/kernels/kernel.conf"
		if [[ -e "$i" ]]; then
			eval "$(/usr/bin/perl "${UROOT}/usr/share/genpnprd/Kconfig.pl" -config)"
			. $i
		fi
		i="$(cat "$c")"
		export S ${!KERNEL_@}
		while true; do
			/usr/bin/perl "${UROOT}/usr/share/genpnprd/Kconfig.pl"
			yes '' 2>/dev/null | kmake oldconfig >/dev/null
			j="$(cat "$c")"
			[[ "$i" == "$j" ]] && break
			i="$j"
		done
		rm "$c.old"
		kmake bzImage
		kmake modules -i
#		cc -Os -static "${S}/Documentation/hwmon/hpfall.c" -o "$rcdir/bin/hpfall"
	    fi
	    echo "Installing kernel modules from $S"
	    kmake INSTALL_MOD_PATH="$rcdir" modules_install
	fi
	if [[ -d "$S" ]]; then
		susp_sig=`grep -s '#define[ 	]*[A-Z]*_SIG[ 	]*".*"$' ${S}/kernel/power/swap.c|sed -e 's:^.*"\(.*\)":\1:'|hexdump -e '"" /1 "%x" ""'`
		grep -q "^CONFIG_KERNEL_LZMA=y" "$S/.config" && : ${LZMA:=1}
	fi
	[[ -z "$PNPMODE" ]] && PNPONLY=true
	GENKERNEL=false
	LIBLOOP=false
fi

#if [[ -L "lib" ]]; then
#	i=`readlink lib`
#	i="${i##*/}"
#	rm lib || die
#	mv "$i" lib || die
#	ln -s lib "$i"
#fi

if [[ -e "$rcdir/lib.loopfs" ]]; then
	mkdir $tmp/loop
	mount "$rcdir/lib.loopfs" $tmp/loop -o loop || die "$rcdir/lib.loopfs mount"
	cp $tmp/loop/* $rcdir/lib/ -Pr
	umount $tmp/loop
fi

: ${KV:=`ls $rcdir/lib/modules`}

if squashfs_enabled; then
	SQUASH=true
fi

cd $rcdir || die
[[ "$PNPMODE" != "nopnp" ]] && /usr/bin/perl ${UROOT}/usr/share/genpnprd/mod2sh.pl $rcdir/lib/modules/* || die
[[ "$PNPMODE" == "pnponly" ]] && PNPONLY=true
for i in etc sbin; do
	for j in $DATA/$i/*; do
		cp $j $rcdir/$i
		chmod 755 "$rcdir/$i${j#$DATA/$i}"
	done
done
[[ -n "$susp_sig" ]] && sed -i -e "s:554c53555350454e44:$susp_sig:" $DATA/etc/blkid.sh
$PNPONLY && rm $rcdir/lib/modules/*/modules.{alias,dep,symbols,*.bin,*map,order,builtin} $rcdir/sbin/modprobe 2>/dev/null
[[ -e $rcdir/sbin/init ]] || ln -s /etc/syspnp $rcdir/sbin/init
$GENKERNEL && for i in $DATA/*.patch; do
	patch -p1 -std $rcdir <$i
done
rm $rcdir/{init,etc/initrd.scripts}.{rej,orig} -f &>/dev/null

# Symlinking busybox clones and moving other to archive
find .|sort|while read i ; do
	[[ "$i" == ./* ]] || continue
	[[ -e "$i" ]] || continue
	[[ -L "$i" ]] && continue
	[[ -f "$i" ]] || continue
	case "$i" in
	*/busybox|*/init|*/etc/*|./lib*|*/mount|*/mdev) continue ;;
	*/*/*) ;;
	*) continue ;;
	esac
	if cmp "bin/busybox" "$i" &>/dev/null; then
		ln -sf /bin/busybox "$i"
		continue
	fi
	$LIBLOOP || continue
	[[ -e "lib/root/$i" ]] || cp "$i" lib/root/ -a --parents || continue
	rm "$i"
done

ln -s busybox bin/zcat
for i in init etc/initrd.defaults etc/initrd.scripts etc/syspnp; do
	[[ -L $i ]] && continue
	read j <$i 2>/dev/null || continue
	[[ -n "${j##\#*}" ]] && j=""
	gzip -9 $i || continue
	echo "$j
eval \"\`zcat /$i.gz\`\"">$i
	chmod 755 $i
done

rm "$rcdir/lib.loopfs" 2>/dev/null
if $SQUASH ; then
	preserve_start loop squashfs
	i=
#	i="-comp gzip"
#	[[ "$LZMA" == 1 ]] && i="-comp lzma"
	i="$i -all-root -no-recovery -no-progress"
	if $LIBLOOP; then
		mksquashfs "$rcdir/lib/" "$rcdir/lib.loopfs" $i || die "mksquashfs"
	else
		mksquashfs "$rcdir/" "$tmp/rd.loopfs" $i || die "mksquashfs"
	fi
else
	preserve_start loop cramfs
	[[ -x /sbin/mkfs.cramfs ]] && mkcramfs(){ /sbin/mkfs.cramfs "${@}";}
	if $LIBLOOP; then
		mkcramfs "$rcdir/lib" "$rcdir/lib.loopfs" || die "mkcramfs"
	else
		mkcramfs "$rcdir/" "$tmp/rd.loopfs" || die "mkcramfs"
	fi
fi
rm "$rcdir"/lib/* -Rf
cd "$rcdir" || die
if $LIBLOOP; then
	preserve_end
else
	rm "$rcdir" -Rf || die
	mv "$tmp/preserve" "$rcdir"
	mv "$tmp/rd.loopfs" "$rcdir/"
fi

[[ -e "$rcdir/dev" ]] && for i in 0 1 2 3; do
	mknod -m 660 "$rcdir/dev/loop${i}" b 7 ${i}
done

cd $rcdir || die
find . -print | cpio --quiet -o -H newc -F "$tmp/initrd-${KV}.cpio" || die
cd "$tmp" || die
rm "$rcdir" -Rf
cd "$home"
if [[ "$IMAGE" == *.cpio ]]; then
	mv "$tmp/initrd-${KV}.cpio" "$IMAGE" || die
else
	gzip -c9 "$tmp/initrd-${KV}.cpio" >"$IMAGE" || die
fi
rm "$tmp" -Rf
echo "initrd updated."

exit 0
