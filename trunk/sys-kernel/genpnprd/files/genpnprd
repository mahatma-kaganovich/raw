#!/bin/bash
## fix genkernel initrd
## adding PNP
## (c) Denis Kaganovich
## under Anarchy license

# non-genkernel, "mount" for not fixed busybox
MINIMAL="/bin/busybox /sbin/blkid"

[[ -z "$*" ]] && {
	echo "Usage: $0 <image> [nopnp|pnponly|pnp] [<overlay> [sources]]]
Example: $0 initrd.cpio
	- will create initrd image from compiled '/usr/src/linux' sources
	- (required: $MINIMAL)"
	exit
}

DATA="/usr/share/genpnprd"

#UROOT="$ROOT"
UROOT=""
home="`pwd`"
PNPONLY=false
GENKERNEL=true
LIBLOOP=true
: ${TMPDIR:="$ROOT/var/tmp"}
tmp="$TMPDIR/genpnprd.$$"


die(){
	echo "Error $*"
	rm "$tmp" -Rf
	exit 1
}

genpkg(){
	"$1" "$2" "$3" "$4" "$5"
}

preserve_start(){
	echo "Preserving unpacked /lib"
	local m mm="$rcdir/lib/modules/${KV}"
	$PNPONLY && source "$mm/modules.alias.sh"
	for m in $* ; do
		if $PNPONLY; then
			modalias $m
			echo "$ALIAS" >>"$tmp/modules.lst"
		else
			grep "/$m\..*:" "${mm}/modules.dep" >>"$tmp/modules.lst" || find "${mm}" -name "$m.ko" >>"$tmp/modules.lst"
		fi
	done
	cd "$rcdir" || die
	mkdir "$tmp/preserve" || die
	cd "lib/modules/$KV"
	echo "/bin/busybox /bin/mount /bin/sh /bin/uname /sbin/mdev" >"$tmp/preserve.lst"
	for m in `cat $tmp/modules.lst` ; do
		m="${m%:}"
		echo "/lib/modules/$KV/${m#*/lib/modules/$KV/}" >>"$tmp/preserve.lst"
		$PNPONLY || ( [[ -e "$mm/modules.dep" ]] && grep "^$m:" "$mm/modules.dep" >>"$tmp/_modules.dep" )
	done
	ROOT="$rcdir" bash "$UROOT/usr/share/genpnprd/genpkgrd" "$tmp/preserve" "$(cat "$tmp/preserve.lst")" >/dev/null
	mv "$tmp/_modules.dep" "$tmp/preserve/lib/modules/${KV}/modules.dep" 2>/dev/null
	$PNPONLY || /usr/bin/perl "$UROOT/usr/share/genpnprd/mod2sh.pl" "$tmp/preserve/lib/modules/${KV}"
	cd "$rcdir"
	if ! $LIBLOOP; then
		mv "$rcdir"/{etc,sys,proc} "$tmp/preserve/" || die
		find .|sort|while read m; do
			[[ "$m" == ./* ]] || continue
			m="${m#./}"
			if ! [[ -e "$tmp/preserve/$m" ]]; then
#				[[ -f "$m" ]] || continue
				[[ -L "$m" ]] && cp "$m" "$tmp/preserve" --parents -a
			fi
			[[ -e "$tmp/preserve/$m" ]] && rm "$m" 2>/dev/null
		done
	fi
}

preserve_end(){
	mv "$tmp/preserve/lib"/* "$rcdir/lib/" -f
	rm "$tmp/preserve" -Rf
}

squashfs_enabled(){
	[[ -e "$rcdir/lib/modules/$KV/kernel/fs/squashfs" ]] && return 0
	return 1
}

SQUASH=false
[[ -e "$tmp" ]] && rm "$tmp" -Rf
mkdir $tmp || die
rcdir="$tmp/rc"
[[ -e "$rcdir" ]] && rm "$tmp" -Rf
mkdir "$rcdir" || die
cd "$rcdir" || die

kmake(){
	make -j2 -C "$S" -s $* || die
}

rcfile="$(readlink -f $1)"
if [[ -f "$rcfile" ]]; then
	( gzip -dc $rcfile | cpio -i ) || cpio -i <$rcfile || die "must be [gzipped] cpio file"
	if [[ -n "$3" ]]; then
		if $LIBLOOP; then
			mkdir lib/root || die
			cp "$3" lib/root -aT
			for i in lib lib32 lib64; do
				[[ -d lib/root/$i ]] && mv lib/root/$i/* $i/
			done
			rm lib/root/{lib,lib32,lib64} -Rf
		else
			cp "$3" "$rcdir" -aT
		fi
	fi
else
	echo "Generating new image '$1'"
	[[ -n "$3" ]] && cp "$3" "$rcdir" -aT
	mkdir "$rcdir"/{etc,dev,sys,proc,bin,sbin}
	ln -s "../etc/syspnp" "$rcdir/sbin/init"
	ln -s "etc/syspnp" "$rcdir/linuxrc"
	ln -s "etc/syspnp" "$rcdir/init"
	x=""
	for i in $MINIMAL; do
		x="$x $(which $i 2>/dev/null||echo "$i")"
	done
	bash "$UROOT/usr/share/genpnprd/genpkgrd" "$rcdir" "$x"
	for i in "[" ash cat cut echo mount sh uname ; do
		ln -s busybox "$rcdir/bin/$i" &>/dev/null
	done
	S="${4:-"$ROOT/usr/src/linux"}"
	c="$S/.config"
	if ! [[ -e "$c" ]]; then
		echo "No '$c', configuring and build kernel"
		kmake defconfig
		i="$ROOT/etc/kernels/kernel.conf"
		if [[ -e "$i" ]]; then
			eval "$(/usr/bin/perl "${UROOT}/usr/share/genpnprd/Kconfig.pl" -config)"
			. $i
		fi
		i="$(cat "$c")"
		export S ${!KERNEL_@}
		while true; do
			/usr/bin/perl "${UROOT}/usr/share/genpnprd/Kconfig.pl"
			yes '' 2>/dev/null | kmake oldconfig >/dev/null
			j="$(cat "$c")"
			[[ "$i" == "$j" ]] && break
			i="$j"
		done
		rm "$c.old"
		kmake bzImage
		kmake modules -i
	fi
	if [[ -z "$3" ]] || ! [[ -e "$3/lib/modules" ]]; then
		echo "Installing kernel modules from $S"
		kmake INSTALL_MOD_PATH="$rcdir" modules_install
	else
		echo "Using '$3/lib/modules'"
	fi
	[[ -z "$2" ]] && PNPONLY=true
	GENKERNEL=false
	LIBLOOP=false
fi

#if [[ -L "lib" ]]; then
#	i=`readlink lib`
#	i="${i##*/}"
#	rm lib || die
#	mv "$i" lib || die
#	ln -s lib "$i"
#fi

if [[ -e "$rcdir/lib.loopfs" ]]; then
	mkdir $tmp/loop
	mount "$rcdir/lib.loopfs" $tmp/loop -o loop || die "$rcdir/lib.loopfs mount"
	cp $tmp/loop/* $rcdir/lib/ -Pr
	umount $tmp/loop
fi

KV=`ls $rcdir/lib/modules`

if squashfs_enabled; then
	SQUASH=true
fi

cd $rcdir || die
[[ "$2" != "nopnp" ]] && /usr/bin/perl ${UROOT}/usr/share/genpnprd/mod2sh.pl $rcdir/lib/modules/* || die
[[ "$2" == "pnponly" ]] && PNPONLY=true
for i in etc sbin; do
	for j in $DATA/$i/*; do
		cp $j $rcdir/$i
		chmod 755 "$rcdir/$i${j#$DATA/$i}"
	done
done
$PNPONLY && rm $rcdir/lib/modules/*/modules.{alias,dep,symbols,*.bin,*map,order,builtin} $rcdir/sbin/modprobe 2>/dev/null
[[ -e $rcdir/sbin/init ]] || ln -s /etc/syspnp $rcdir/sbin/init
$GENKERNEL && for i in $DATA/*.patch; do
	patch -p1 -std $rcdir <$i
done
rm $rcdir/init.{rej,orig} -f &>/dev/null

# Symlinking busybox clones and moving other to archive
find .|sort|while read i ; do
	[[ "$i" == ./* ]] || continue
	[[ -e "$i" ]] || continue
	[[ -L "$i" ]] && continue
	[[ -f "$i" ]] || continue
	case "$i" in
	*/busybox|*/init|*/etc/*|./lib*|*/mount) continue ;;
	*/*/*) ;;
	*) continue ;;
	esac
	if cmp "bin/busybox" "$i" &>/dev/null; then
		ln -sf /bin/busybox "$i"
		continue
	fi
	$LIBLOOP || continue
	[[ -e "lib/root/$i" ]] || cp "$i" lib/root/ -a --parents || continue
	rm "$i"
done

rm "$rcdir/lib.loopfs" 2>/dev/null
if $SQUASH ; then
	preserve_start loop squashfs
	if $LIBLOOP; then
		mksquashfs "$rcdir/lib/" "$rcdir/lib.loopfs" -all-root -no-recovery -no-progress || die "mksquashfs"
	else
		mksquashfs "$rcdir/" "$tmp/rd.loopfs" -all-root -no-recovery -no-progress || die "mksquashfs"
	fi
else
	preserve_start loop cramfs
	if $LIBLOOP; then
		mkcramfs "$rcdir/lib" "$rcdir/lib.loopfs" || die "mkcramfs"
	else
		mkcramfs "$rcdir/" "$tmp/rd.loopfs" || die "mkcramfs"
	fi
fi
rm "$rcdir"/lib/* -Rf
cd "$rcdir" || die
if $LIBLOOP; then
	preserve_end
else
	rm "$rcdir" -Rf || die
	mv "$tmp/preserve" "$rcdir"
	mv "$tmp/rd.loopfs" "$rcdir/"
fi

[[ -e "$rcdir/dev" ]] && for i in 0 1 2 3; do
	mknod -m 660 "$rcdir/dev/loop${i}" b 7 ${i}
done

cd $rcdir || die
find . -print | cpio --quiet -o -H newc -F "$tmp/initrd-${KV}.cpio" || die
cd "$tmp" || die
rm "$rcdir" -Rf
cd "$home"
if [[ "$1" == *.cpio ]]; then
	mv "$tmp/initrd-${KV}.cpio" "$1" || die
else
	gzip -c9 "$tmp/initrd-${KV}.cpio" >"$1" || die
fi
rm "$tmp" -Rf
echo "initrd updated."

exit 0
