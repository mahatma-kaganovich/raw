mpm-itk upstream 2.2.17-01 http://mpm-itk.sesse.net
diff -pruN a/server/config.c b/server/config.c
--- a/server/config.c	2010-10-07 19:56:54.000000000 +0300
+++ b/server/config.c	2011-03-22 19:13:00.779992395 +0200
@@ -1840,6 +1840,34 @@ AP_CORE_DECLARE(int) ap_parse_htaccess(a
         else {
             if (!APR_STATUS_IS_ENOENT(status)
                 && !APR_STATUS_IS_ENOTDIR(status)) {
+#ifdef ITK_MPM
+                /*
+                 * If we are in a persistent connection, we might end up in a state
+                 * where we can no longer read .htaccess files because we have already
+                 * setuid(). This can either be because the previous request was for
+                 * another vhost (basically the same problem as when setuid() fails in
+                 * itk.c), or it can be because a .htaccess file is readable only by
+                 * root.
+                 *
+                 * In any case, we don't want to give out a 403, since the request has
+                 * a very real chance of succeeding on a fresh connection (where
+                 * presumably uid=0). Thus, we give up serving the request on this
+                 * TCP connection, and do a hard close of the socket. As long as we're
+                 * in a persistent connection (and there _should_ not be a way this
+                 * would happen on the first request in a connection, save for subrequests,
+                 * which we special-case), this is allowed, as it is what happens on
+                 * a timeout. The browser will simply open a new connection and try
+                 * again (there's of course a performance hit, though, both due to
+                 * the new connection setup and the fork() of a new server child).
+                 */
+                if (r->main == NULL && getuid() != 0) {
+                    ap_log_rerror(APLOG_MARK, APLOG_WARNING, status, r,
+                                  "Couldn't read %s, closing connection.",
+                                  filename);
+                    ap_lingering_close(r->connection);
+                    exit(0);
+                }
+#endif          
                 ap_log_rerror(APLOG_MARK, APLOG_CRIT, status, r,
                               "%s pcfg_openfile: unable to check htaccess file, "
                               "ensure it is readable",
diff -pruN a/server/mpm/experimental/itk/itk.c b/server/mpm/experimental/itk/itk.c
--- a/server/mpm/experimental/itk/itk.c	2011-03-22 19:20:57.089992184 +0200
+++ b/server/mpm/experimental/itk/itk.c	2011-03-22 19:13:00.779992395 +0200
@@ -556,8 +556,12 @@ static void child_main(int child_num_arg
     (void) ap_update_child_status(sbh, SERVER_READY, (request_rec *) NULL);
 
     /* Set up the pollfd array */
-    /* ### check the status */
-    (void) apr_pollset_create(&pollset, num_listensocks, pchild, 0);
+    status = apr_pollset_create(&pollset, num_listensocks, pchild, 0);
+    if (status != APR_SUCCESS) {
+        ap_log_error(APLOG_MARK, APLOG_EMERG, status, ap_server_conf,
+                     "Couldn't create pollset in child; check system or user limits");
+        clean_child_exit(APEXIT_CHILDSICK); /* assume temporary resource issue */
+    }
 
     for (lr = ap_listeners, i = num_listensocks; i--; lr = lr->next) {
         apr_pollfd_t pfd = { 0 };
@@ -628,19 +632,27 @@ static void child_main(int child_num_arg
                 apr_int32_t numdesc;
                 const apr_pollfd_t *pdesc;
 
-                /* timeout == -1 == wait forever */
-                status = apr_pollset_poll(pollset, -1, &numdesc, &pdesc);
+                /* check for termination first so we don't sleep for a while in
+                 * poll if already signalled
+                 */
+                if (one_process && shutdown_pending) {
+                    SAFE_ACCEPT(accept_mutex_off());
+                    return;
+                }
+                else if (die_now) {
+                    /* In graceful stop/restart; drop the mutex
+                     * and terminate the child. */
+                    SAFE_ACCEPT(accept_mutex_off());
+                    clean_child_exit(0);
+                }
+                /* timeout == 10 seconds to avoid a hang at graceful restart/stop
+                 * caused by the closing of sockets by the signal handler
+                 */
+                status = apr_pollset_poll(pollset, apr_time_from_sec(10), 
+                                          &numdesc, &pdesc);
                 if (status != APR_SUCCESS) {
-                    if (APR_STATUS_IS_EINTR(status)) {
-                        if (one_process && shutdown_pending) {
-                            return;
-                        }
-                        else if (die_now) {
-                            /* In graceful stop/restart; drop the mutex
-                             * and terminate the child. */
-                            SAFE_ACCEPT(accept_mutex_off());
-                            clean_child_exit(0);
-                        }
+                    if (APR_STATUS_IS_TIMEUP(status) ||
+                        APR_STATUS_IS_EINTR(status)) {
                         continue;
                     }
                     /* Single Unix documents select as returning errnos
@@ -754,6 +766,11 @@ static void child_main(int child_num_arg
         if (getuid())
             die_now = 1;
     }
+    /* This apr_pool_clear call is redundant, should be redundant, but compensates
+     * a flaw in the apr reslist code.  This should be removed once that flaw has
+     * been addressed.
+     */
+    apr_pool_clear(ptrans);
     clean_child_exit(0);
 }
 
@@ -1698,16 +1715,16 @@ static void *itk_create_dir_config(apr_p
 static void *itk_merge_dir_config(apr_pool_t *p, void *parent_ptr, void *child_ptr)
 {
     itk_per_dir_conf *c = (itk_per_dir_conf *)
-        apr_pcalloc(p, sizeof(itk_per_dir_conf));
+        itk_create_dir_config(p, NULL);
     itk_per_dir_conf *parent = (itk_per_dir_conf *) parent_ptr;
     itk_per_dir_conf *child = (itk_per_dir_conf *) child_ptr;
 
     if (child->username != NULL) {
-      c->username = apr_pstrdup(p, child->username);
+      c->username = child->username;
       c->uid = child->uid;
       c->gid = child->gid;
-    } else if (parent->username != NULL) {
-      c->username = apr_pstrdup(p, parent->username);
+    } else {
+      c->username = parent->username;
       c->uid = parent->uid;
       c->gid = parent->gid;
     }
