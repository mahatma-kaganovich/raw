#!/usr/bin/perl
# (c) Denis Kaganovich, Anarchy or GPLv2
# OpenBox3 pipe menu v0.4
# ob3menu {--<command> {params}}
# 	--slow {<path/to/rc.xml>}
#	--autostart {profile}
#	--include {menu to include}
#	--profile {profile}
#	--mime <mime.sh> {dirs}
# "--slow" - +keybinds, 3.5.0+ menu icons, better with cache.

my (%ico,%key,%cat,%cat,%cc,%dir,@prof,$prof);
%xml_=('<'=>'lt','>'=>'gt',"'"=>'apos','"'=>'quot','&'=>'amp');
$xml_='<>\'"&';
%notify=(
	'true'=>'<startupnotify><enabled>yes</enabled></startupnotify>',
	'false'=>'<startupnotify><enabled>no</enabled></startupnotify>'
);
%ico_=(
	'fs'=>['mount-point'],
	'umount'=>['usbpendrive_unmount','gdu-unmount'],
	'mount'=>['xfce-mount','gdu-mount'],
);
# to configure more - need xml parsing
@conf=('Focus:','focusNew','followMouse','focusLast','underMouse','raiseOnFocus', 'Theme:','animateIconify','keepBorder', 'Menu:','showIcons', 'Resize:','drawContents',
    'Applications:','decor','shade','focus','iconic','skip_pager','skip_taskbar','fullscreen','maximized');
%ch=('yes'=>'no','no'=>'yes','true'=>'false','false'=>'true');

for(@ARGV){
	if($_=~s/^--//){
		undef $P{$i=$_};
	}else{
		push(@{$P{$i}},$_);
	}
}

for($ENV{LANG}=~/([a-zA-Z0-9]+)?(_\w+)?(\.[\w-]+)?(\@\w+)?/){
	$lang.='(?:'.quotemeta($_).')?' if(defined($_));
}
$lang='(?:\['.$lang.'\])?' if($lang);

@path=split(/:/,$ENV{PATH});

if(exists($P{profile})){
	$prof=join('|',@{$P{profile}});
}elsif($prof=$ENV{YA_PROFILE}){
	$prof=~s/[, ]+/|/g;
}

sub eXist{
	if(index($_[0],'/')>=0){
		stat($_[0]);
		return(-x _ && -f _);
	}
	for(@path){
		stat("$_/$_[0]");
		return 1 if(-x _ && -f _);
	}
	0;
}

sub icons{
	opendir(my $D,$_[0])||return;
	my @d=readdir($D);
	closedir($D);
	for(@d){
		if(my ($i,$j)=$_=~/^(.*)\.(...)$/){
			$ico{$i}=$ico{$_}=$_[0].$_ if($j && $j ne 'svg');
		}elsif(!($_=~/^\.|scalable/)){
			icons("$_[0]$_/");
		}
	}
}

sub ico{
	for(@_){
		for(@{$ico_{$_}},$_){
			return " icon='$ico{$_}'" if(exists($ico{$_}));
		}
	}
}

if(exists($P{slow})){
	for(@{$P{slow}}){
		my $s;
		open($F,"<$_") && read($F,$s,-s $F);
		close($F);
		for $i (@conf){
			$conf{$i}=$x if(substr($i,-1) ne ':' && (($x)=$s=~/<$i>([^<]*)<\/$i>/));
		}
		$P{'slow'}=$conf{showIcons} eq 'yes';
		$s=~s/<keybind\s+key=\"(.*?)\".*?>\s*<action name=\"Execute\">.*?<command>(.*?)<\/command>/$key{$2}=$1;''/gse;
	};
	icons('/usr/share/icons/');
	while(</usr/share/pixmaps/*.???>){
		chomp($_);
		next if($_=~/\.svg$/);
		$i=$_;
		~s/.*\///;
		$ico{$_}=$i;
		~s/\....$//;
		$ico{$_}=$i;
	}
}

for $f(map{glob $_}('/usr/share/applications/*.desktop','/usr/share/applications/*/*.desktop','/usr/share/ya-layout/Desktop/*.desktop','/usr/share/ya-layout/Desktop/exit/*.desktop','/etc/xdg/autostart/*.desktop','/usr/share/desktop-directories/*.directory')){
	my (%d,%en,$F);
	if(($i)=$f=~/\/([^\/]*)\.directory$/){
		next if(!exists($cc{$i}) && $prof && $i=~/^(?:$prof)-/i);
		open($F,"<$f")||next;
		while(<$F>){push @{$en{$k.$l}},$d{$k}=$v if(($k,$l,$v)=$_=~/^\s*([^#\s=\[\]#]+)($lang)\s*=([^#\n\r]*)/i)}
		close($F);
		unshift @{$en{Name}},$i if($i ne $en{Name}->[0]);
	}else{
		open($F,"<$f")||next;
		while(<$F>){$d{$k}=$v if(($k,$v)=$_=~/^\s*([^#\s=\[\]#]+)$lang\s*=([^#\n\r]*)/i)};
		close($F);
		exists($d{Exec}) || next;
	}
	next if(exists($d{TryExec}) && !eXist($d{TryExec}));
	$d{Exec}="/usr/bin/ya-session --run +$d{Exec}" if($d{Terminal} && lc($d{Terminal}) ne 'false');
	if(!exists($d{Name})){
		for(Comment,Exec){
			if(exists($d{$_})){
				$d{Name}=$d{$_};
				goto N;
			}
		}
		next;
	}
N:
	$i='';
	~s/([$xml_])/\&$xml_{$1};/g for(values %d);
	if(exists($P{slow}) && exists($d{Icon})){
		$i=$d{Icon};
		$i=~s/(?:.*\/)?(.*?).svg$/$1.png/;
		$i=$ico{$i} if(exists($ico{$i}));
		$i=" icon='$i'";
	}
	if(substr($f,0,4) eq '/etc'){
		$d{Categories}='Autostart';
		if(exists($P{autostart})){
			my $i;
			if(($i=join('|',@{$P{autostart}})||$prof) && !exists($d{OnlyShowIn}) || grep(/^(?:$i)$/i,split(';',$d{OnlyShowIn}))){
				print STDERR "$d{Exec} &\n";
				$d{Name}="+ $d{Name}";
			}
		}
	}
	if($d{Type} eq 'Application'){
		$d{Exec}=~s/\s+%\w$//;
		$d{Name}.=" 	[$key{$d{Exec}}]" if(exists($key{$d{Exec}}));
		$i="<item label='$d{Name}'$i><action name='Execute'><execute>$d{Exec}</execute>".$notify{lc($d{StartupNotify})}.'</action></item>';
	}elsif($d{Type} eq 'Directory'){
		for(@{$en{Name}}){
			if($d{Name} ne $_){
				$dir{$_}="$d{Name}'$i";
				$cc{$_}+=2000;
			}elsif($i){
				$dir{$_}="$d{Name}'$i";
				$cc{$_}+=1000;
			}
		}
		next;
	}else{next}
	for(split(/;/,$d{Categories})){
		next if($_ eq '' || exists($cat{$i}->{$_}));
		$cat{$i}->{$_}=1;
		$cc{$_}++;
	}
	$cat{$i}=undef if(!exists($cat{$i}));
	if(exists($P{mime}) && exists($d{MimeType})){
		$d{MimeType}=~s/;$//;
		push @{$mime{$_}},$i for(split(/;/,$d{MimeType}));
	}
}
$_=defined($_)?[sort{$cc{$a} <=> $cc{$b}}(keys %{$_})]:['misc'] for(values %cat);
push @{$cat1{pop @{$cat{$_}}}},$_ for(keys %cat);
for(keys %cat){
	for $i (@{delete($cat{$_})}){
		push @{$cat1{$i}},$_ if(exists($cat1{$i}))
	}
}
$i=0;
print '<openbox_pipe_menu><menu id="client-list-combined-menu"/><separator/>';
for(sort keys %cat1){
	print "<menu id='$i' label='",$dir{$_}||"$_'",'>',(sort @{$cat1{$_}}),'</menu>';
	$i++;
}
for(map{glob $_}(@{$P{include}})){
	if(open(my $F,(-x $_)?"$_|":"<$_")){
		print('<separator />',(<$F>));
		close($F);
	}
}

if(defined($P{mime})){
	for(values %mime){
		for(@$_){
			($_=~s/(<item label=').*?(' icon=)/$1\$F$2/g) ||
			($_=~s/(<item label=')(.*?)'/$1\$F  [$2]'/g); #'
			$_=~s/(<\/execute)/ \$X$1/g;
		}
	}
	my (%g,%m);
	open($F,'<','/usr/share/mime/globs')||last;
	while(my $s=<$F>){
		chomp($s);
		($i,$t)=split(/:/,$s);
		$g{$t}->{$i}=undef if(exists($mime{$i}));
	}
	close($F);
	print "<separator/>";
	while(($t,$i)=each %g){
		for $i(keys %$i){
			$m{$t}->{$_}=undef for(@{$mime{$i}});
		}
	}
	%g=();
	while(($t,$i)=each %m){
		$g{join('',sort keys %$i)}->{$t}=undef;
	}
	my $fold=ico('folder');
	open($F,'>',$t=shift(@{$P{mime}}))||die $!;
	for my $D(@{$P{mime}}){
#		( -r $D ) &&
		print "<menu id='dir:$D' label='$D' execute='/bin/bash \"$t\" $D'$fold />";
	}
	$i=1;
	if($> && open($FF,'<','/etc/fstab')){
		$i=0;
		while(<$FF>){
			if($_=~/^(?:[^\s#]+\s+){3}(?:\S*,)?users?(?:,\S*)?\s/g){
				$i=1;
				last;
			}
		}
		close($FF);
	}
	print map{"<menu id='ob3menumount:$_' label='$_' execute='/usr/bin/ob3menumount $_'".ico($_)."/>"}('fs',$i?('mount','umount'):());
	print $F q(#/bin/bash
xml(){
x="${f//&/&amp;}"
x="${x//</&lt;}"
x="${x//>/&gt;}"
x="${x//\'/&apos;}"
x="${x//\"/&quot;}"
}
f="${1%/}"
xml
# avoid automount on ls|stat symlinks
a=false
case "$f" in
/mnt/auto/disk/*/*\);;
/mnt/auto/disk/*\)a=true;f="/dev${f#/mnt/auto}";;
esac
echo "<openbox_pipe_menu><separator label='$x/'/>"
for f in "$f"/*; do
if $a; then
	i=`readlink -f "$f"` && grep -qs "\":$i\"$" /var/run/auto.dev || continue
	f="/mnt/auto${f#/dev}"
fi
xml
X="${x//\\/\\\\}"
X="${X//\$/\\\$}"
X="${X//&quot;/\\&quot;}"
F="${X##*/}"
X="&quot;$X&quot;"
if $a || [ -d "$f" ]; then
$a || [ -e "$f" ] &&
echo "<menu id='dir:$x' label='$F/' execute='/bin/bash &apos;$0&apos; $X'),$fold,q( />"
else
( [ -x "$f" ] && echo "<item label='*$F'><action name='Execute'><execute>/usr/bin/ya-session --run +$X</execute></action></item>" ) ||
[ -r "$f" ] &&
case "${f,,}" in
);
	while(($i,$t)=each %g){
		print $F lc(join('|',keys %$t)),")echo \"$i\";;&\n";
	}
	print $F 'esac
fi
done
echo "</openbox_pipe_menu>"';
	close($F);
}

print qq(<separator/>
<menu id="$i" label="OpenBox">
<menu id="client-menu"/>
<menu id="client-list-menu"/>
);

if(exists($P{slow})){
	print "<menu id='ob3m:config' label='config'>",(map{
		$i=substr($_,18,-10);
		"<item label='$i'><action name='Execute'><execute>/usr/bin/ya-session --fixrc $i &lt;theme&gt; &lt;name&gt; [^&lt;]*</execute></action></item>"
	}(</usr/share/themes/*/openbox-3>,'/usr/share/themes//dev/null/openbox-3')),
	(map{
		if(substr($_,-1) eq ':'){
			"<separator label='$_'/>";
		}else{
			$i=$conf{$_};
			$x=$_;
			$x=~s/([A-Z])/ $1/g;
			$x=~s/_/ /g;
			exists($ch{$i})?"<item label='$x: $i'><action name='Execute'><execute>/usr/bin/ya-session --fixrc $ch{$i} &lt;$_&gt; $i</execute></action></item>":''
		}
	}(@conf)),
	'</menu>';
}

print qq(
<item label="Fullscreen"><action name="ToggleFullscreen"/></item>
<item label="Reconfigure"><action name="Reconfigure"/></item>
<item label="Restart"><action name="Restart"/></item>
<separator label=""/>
<item label="Exit"><action name="Exit"/></item>
</menu>
</openbox_pipe_menu>
);
