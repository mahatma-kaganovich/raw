#!/bin/bash
# openbox pipe menu to [u]mount removable & view mounts
# (c) Denis Kaganovich, Anarchy or GPLv2

notify='/usr/bin/notify-send -t 6000'

xml(){
	x="${x//&/&amp;}"
	x="${x//</&lt;}"
	x="${x//>/&gt;}"
	x="${x//\'/&apos;}"
	x="${x//\"/&quot;}"
}

_removable(){
	[ "$DEVNAME" != "$d" -o -b "$d" ] || return 1
	x=
	s="/sys/block/$DEVNAME"
	if [ -e "$s" ]; then
		read x <"$s/removable"
	else
		for i in /sys/block/*/"$DEVNAME"; do
			[ -e "$i/partition" ] && s="${i%/*}" && read x <"$s/removable" && [ "$x" = 0 ] && break
		done
	fi
	read model <"$s/device/model"
	[ "$x" = 1 ]
}

clist(){
while read d m t f x; do
	true
done
}

_umnt(){
while read d m t f x; do
	model=
	f=",$f,"
	case "$1:$2" in
	/etc/fstab:mount)
		[ "$UID" = 0 -o -z "${f##*,users,*}" -o -z "${f##*,user,*}" ] || continue
	;;&
	/etc/fstab:umount)
		[ "$UID" = 0 -o -z "${f##*,users,*}" ] || continue
	;;&
	/etc/mtab:umount)
		[ -z "${f##*,user=$USER,*}" ] || continue
	;;&
	*:mount|*:umount)
		DEVNAME="${d#/dev/}"
		_removable || continue
	;;&
	*:fs)
		DEVNAME="${d#/dev/}"
		_removable
#		[ -z "${m##/mnt/*}" ] || [ "$m" = / -a "$d" != rootfs ] || continue
		[ -z "${d##*/*}" ] || continue
	;;&
	/etc/fstab:*)
		d1=
		while read d1 m1; do
			[ "$d1" = "$d" ] && break
		done </proc/mounts
	;;&
	/etc/fstab:mount)[ "$d1" = "$d" ] && continue;;&
	/etc/fstab:umount)[ "$d1" = "$d" ] || continue;;&
	*)
		x="$d -> $m${model:+: $model}"
		xml
		u="$x"
		x="/bin/$2 '$d'"
	;;&
	*:fs)
		x="$m"
		xml
		echo "<menu id='ob3menumount:fs $x' label='$u' execute='/bin/bash .cache/ya/menu.xml.sh &apos;$x&apos;'/>"
	;;
	*:umount)x="'$d'";;&
	*:mount)x="'$m'";;&
	*)
		xml
		echo "<item label='$u'><action name='Execute'><execute>${notify_}/bin/$2 $x</execute></action></item>"
	;;
	esac
done <"$1"
}

_exec(){
	r=0
	e='OK'
	# do not eval to ob compat
	m="`"${@}" 2>&1`" || {
		r=$?
		e="ERROR[$r]"
	}
	[ $r = 0 ] && case "$1" in
	/bin/umount)/usr/bin/eject "$2";; # "ejected" usb can be detached too
	esac
	i="$*"
	i="${i%% *}"
	shift
	m="${i##*/} $*
$e${m:+
$m}"
	$notify "$m"
	return $r
}

obuser(){
local i
user=
i=`grep -sazl "^/usr/bin/openbox$" /proc/[0-9]*/cmdline` || return 1
i="/proc/${i//[^0-9
]/}/environ"
# only single session
[ -e "$i"  ] || return 1
export DBUS_SESSION_BUS_ADDRESS=`grep -sazh "^DBUS_SESSION_BUS_ADDRESS=" "$i"|sed -e "s:\x0:\n:g" -e 's:^.*=::'`
user=`grep -sazh "^USER=" "$i"|sed -e "s:\x0:\n:g" -e 's:^.*=::'`
}

case "$1:$ACTION" in
block:remove)
	# udev/hotplug: umount every removed
	notify=exec
	[ -x "${notify%% *}" ] && obuser && [ -n "$DBUS_SESSION_BUS_ADDRESS" ] && notify_=_exec
	${notify_} /bin/umount -l "/dev/$DEVNAME"
;;
block:add)
	# udev/hotplug: mount only if openbox user found
	d="/dev/$DEVNAME"
	_removable && obuser && [ -n "$user" ] || exit
	m="/mnt/auto/$DEVNAME"
	mkdir -p "$m"
	notify_='_exec '
	[ -n "$DBUS_SESSION_BUS_ADDRESS" -a -x "${notify%% *}" ] || notify_=
	${notify_}sudo -u "$u" /bin/mount "$d" "$m" || rmdir "$m"
;;
exec:*)
	shift
	_exec "${@}"
	exit $?
;;
*)
	notify_="$0 exec "
	[ -n "$DBUS_SESSION_BUS_ADDRESS" -a -x "${notify%% *}" ] || notify_=
	echo "<openbox_pipe_menu><separator label='$1'/>"
	USER="${2:-$USER}"2
	case "$1:$UID" in
	umount:0|fs:*)
		_umnt /proc/mounts "${@}"
	;;
	umount:*)
		_umnt /etc/mtab "${@}"
		_umnt /etc/fstab "${@}"
	;;
	mount:*)
		_umnt /etc/fstab "${@}"
	;;
	esac
	echo '</openbox_pipe_menu>'
;;
esac 2>/dev/null
