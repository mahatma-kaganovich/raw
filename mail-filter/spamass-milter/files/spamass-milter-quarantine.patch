--- a/spamass-milter.cpp	2022-08-31 03:37:24.995770049 +0300
+++ b/spamass-milter.cpp	2022-09-01 08:00:56.474818413 +0300
@@ -138,7 +138,7 @@ struct smfiDesc smfilter =
   {
     FilterName, // filter name
     SMFI_VERSION,   // version code -- leave untouched
-    SMFIF_ADDHDRS|SMFIF_CHGHDRS|SMFIF_CHGBODY,  // flags
+    SMFIF_ADDHDRS|SMFIF_CHGHDRS|SMFIF_CHGBODY|SMFIF_QUARANTINE,  // flags
     mlfi_connect, // info filter callback
     mlfi_helo, // HELO filter callback
     mlfi_envfrom, // envelope sender filter callback
@@ -181,6 +181,7 @@ char **spamc_argv;
 bool flag_bucket = false;
 bool flag_bucket_only = false;
 char *spambucket;
+bool quarantine = false;	/* quarantine auth users */
 bool flag_full_email = false;		/* pass full email address to spamc */
 bool flag_expand = false;	/* alias/virtusertable expansion */
 bool warnedmacro = false;	/* have we logged that we couldn't fetch a macro? */
@@ -193,7 +194,7 @@ int
 main(int argc, char* argv[])
 {
    int c, err = 0;
-   const char *args = "aAfd:mMp:P:r:l:u:D:i:b:B:e:xS:R:c:C:g:T:";
+   const char *args = "QaAfd:mMp:P:r:l:u:D:i:b:B:e:xS:R:c:C:g:T:";
    char *sock = NULL;
    char *group = NULL;
    bool dofork = false;
@@ -303,6 +304,9 @@ main(int argc, char* argv[])
                 debug(D_MISC, "Parsing recipient address ignore list");
                 parse_addresslist(optarg, &ignoreaddrs);
                 break;
+            case 'Q':
+        	quarantine = true;
+        	break;
             case '?':
                 err = 1;
                 break;
@@ -357,6 +361,7 @@ main(int argc, char* argv[])
       cout << "   -A: Scan but only tag messages affected by -a, -T and -i, never reject or defer them." << endl;
       cout << "   -T: skip (ignore) checks if any recipient is in this address list" << endl;
       cout << "          example: -T foo@bar.com,spamlover@yourdomain.com" << endl;
+      cout << "   -Q: quarantine from authenticated connection (sendmail feature hf*)" << endl;
       cout << "   -- spamc args: pass the remaining flags to spamc." << endl;
 
       exit(EX_USAGE);
@@ -502,6 +507,11 @@ int
 assassinate(SMFICTX* ctx, SpamAssassin* assassin)
 {
   struct context *sctx = (struct context*)smfi_getpriv(ctx);
+  if(quarantine && sctx->onlytag) {
+	// todo: resolve concurrence with clamav-milter
+	smfi_quarantine(ctx, FilterName);
+	if(!alwaystag) return SMFIS_CONTINUE;
+  }
   // find end of header (eol in last line of header)
   // and beginning of body
   string::size_type eoh1 = assassin->d().find("\n\n");
@@ -881,6 +891,7 @@ mlfi_envfrom(SMFICTX* ctx, char** envfro
     if (auth_type) {
       debug(D_MISC, "auth_type=%s", auth_type);
       sctx->onlytag=true;
+      if(!quarantine)
       if(!alwaystag){
         debug(D_FUNC, "mlfi_envfrom: auth exit ignore");
         return SMFIS_ACCEPT;
